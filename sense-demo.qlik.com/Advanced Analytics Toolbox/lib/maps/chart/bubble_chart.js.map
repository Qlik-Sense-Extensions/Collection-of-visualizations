{
    "version": 3,
    "sources": [
        "chart/bubble_chart.js"
    ],
    "names": [
        "define",
        "Plotly",
        "utils",
        "draw",
        "$scope",
        "app",
        "data",
        "elementId",
        "customOptions",
        "options",
        "showlegend",
        "layout",
        "props",
        "showLegend",
        "xaxis",
        "title",
        "xLabelsAndTitle",
        "measures",
        "label",
        "showgrid",
        "xScale",
        "side",
        "xAxisPosition",
        "tickformat",
        "getTickFormat",
        "tickprefix",
        "getPrefix",
        "ticksuffix",
        "getSuffix",
        "yaxis",
        "yLabelsAndTitle",
        "yScale",
        "yAxisPosition",
        "separators",
        "getSeparators",
        "dragmode",
        "margin",
        "r",
        "marginRight",
        "l",
        "marginLeft",
        "t",
        "marginTop",
        "b",
        "marginBottom",
        "$",
        "extend",
        "config",
        "scrollZoom",
        "showLink",
        "displaylogo",
        "modeBarButtonsToRemove",
        "chart",
        "document",
        "getElementById",
        "plot",
        "setEvents",
        "on",
        "eventData",
        "points",
        "length",
        "fields",
        "map",
        "d",
        "text",
        "pointNumber",
        "parseInt",
        "elemNum",
        "filter",
        "x",
        "self",
        "selectValues",
        "field",
        "dimensions",
        "expression"
    ],
    "mappings": "AAAA,YAAAA,SACE,0BACA,iBACC,SAACC,EAAQC,GACV,OAWEC,KAXK,SAWAC,EAAQC,EAAKC,EAAMC,EAAWC,GACjC,GAAMC,IACJC,WAAYN,EAAOO,OAAOC,MAAMC,WAChCC,OACEC,MAAOX,EAAOO,OAAOC,MAAMI,gBAAkBZ,EAAOO,OAAOC,MAAMK,SAAS,GAAGC,MAAQ,GACrFC,SAAUf,EAAOO,OAAOC,MAAMQ,OAC9BC,KAAMjB,EAAOO,OAAOC,MAAMU,cAC1BC,WAAYrB,EAAMsB,cAAcpB,EAAQ,GACxCqB,WAAYvB,EAAMwB,UAAUtB,EAAQ,GACpCuB,WAAYzB,EAAM0B,UAAUxB,EAAQ,IAEtCyB,OACEd,MAAOX,EAAOO,OAAOC,MAAMkB,gBAAkB1B,EAAOO,OAAOC,MAAMK,SAAS,GAAGC,MAAQ,GACrFC,SAAUf,EAAOO,OAAOC,MAAMmB,OAC9BV,KAAMjB,EAAOO,OAAOC,MAAMoB,cAC1BT,WAAYrB,EAAMsB,cAAcpB,EAAQ,GACxCqB,WAAYvB,EAAMwB,UAAUtB,EAAQ,GACpCuB,WAAYzB,EAAM0B,UAAUxB,EAAQ,IAEtC6B,WAAY/B,EAAMgC,cAAc9B,EAAQ,GACxC+B,SAAU,SACVC,QACEC,EAAyC,SAArCjC,EAAOO,OAAOC,MAAMoB,cAA4B5B,EAAOO,OAAOC,MAAM0B,YAAc,GAAKlC,EAAOO,OAAOC,MAAM0B,YAC/GC,EAAyC,QAArCnC,EAAOO,OAAOC,MAAMoB,cAA2B5B,EAAOO,OAAOC,MAAM4B,WAAa,GAAKpC,EAAOO,OAAOC,MAAM4B,WAC7GC,EAAyC,OAArCrC,EAAOO,OAAOC,MAAMU,cAA0BlB,EAAOO,OAAOC,MAAM8B,UAAY,GAAKtC,EAAOO,OAAOC,MAAM8B,UAC3GC,EAAyC,UAArCvC,EAAOO,OAAOC,MAAMU,cAA6BlB,EAAOO,OAAOC,MAAMgC,aAAe,GAAKxC,EAAOO,OAAOC,MAAMgC,cAIrHC,GAAEC,OAAOrC,EAASD,EAElB,IAAMuC,IACJC,YAAY,EACZC,UAAU,EACVC,aAAa,EACbC,wBAAyB,oBAGrBC,EAAQC,SAASC,eAAe/C,EAGtC,OAFAN,GAAOsD,KAAKH,EAAO9C,EAAMG,EAASsC,GAE3BK,GAUTI,UA9DK,SA8DKJ,EAAOhD,EAAQC,GA0BvB,MAxBA+C,GAAMK,GAAG,eAAgB,SAACC,GACxB,GAAwB,mBAAbA,IAA4BA,EAAUC,OAAOC,OAAS,EAAG,CAClE,GAAMC,GAASH,EAAUC,OAAOG,IAAI,SAACC,GACnC,GAAqB,mBAAVA,GAAEC,KAAqB,CAChC,GAAMC,GAAcF,EAAEE,WACtB,OAAOC,UAASH,EAAEzD,KAAK6D,QAAQF,GAAc,OAE9CG,OAAO,SAACC,GACT,MAAoB,mBAANA,IAGhBjE,GAAOkE,KAAKC,aAAa,EAAGV,GAAQ,MAKxCT,EAAMK,GAAG,kBAAmB,SAACC,GAC3B,GAAwB,mBAAbA,IAA4BA,EAAUC,OAAOC,OAAS,EAAG,CAClE,GAAMC,GAASH,EAAUC,OAAOG,IAAI,SAACC,GACnC,MAAOG,UAASH,EAAEC,KAAM,KAE1B3D,GAAImE,MAAMpE,EAAOO,OAAOC,MAAM6D,WAAW,GAAGC,YAAYH,aAAaV,GAAQ,GAAM,MAGhF",
    "file": "../../js/chart/bubble_chart.js",
    "sourcesContent": [
        "define([\r\n  '../../vendor/plotly.min',\r\n  '../util/utils'\r\n], (Plotly, utils) => {\r\n  return {\r\n    /**\r\n     * draw - draw chart\r\n     *\r\n     * @param {Object} $scope        angular $scope\r\n     * @param {Object} data          Data for chart\r\n     * @param {String} elementId     HTML element id to embed chart\r\n     * @param {Object} customOptions Custom chart options\r\n     *\r\n     * @return {Object} Chart object\r\n     */\r\n    draw($scope, app, data, elementId, customOptions) {\r\n      const options = {\r\n        showlegend: $scope.layout.props.showLegend,\r\n        xaxis: {\r\n          title: $scope.layout.props.xLabelsAndTitle ? $scope.layout.props.measures[0].label : '',\r\n          showgrid: $scope.layout.props.xScale,\r\n          side: $scope.layout.props.xAxisPosition,\r\n          tickformat: utils.getTickFormat($scope, 0),\r\n          tickprefix: utils.getPrefix($scope, 0),\r\n          ticksuffix: utils.getSuffix($scope, 0),\r\n        },\r\n        yaxis: {\r\n          title: $scope.layout.props.yLabelsAndTitle ? $scope.layout.props.measures[1].label : '',\r\n          showgrid: $scope.layout.props.yScale,\r\n          side: $scope.layout.props.yAxisPosition,\r\n          tickformat: utils.getTickFormat($scope, 1),\r\n          tickprefix: utils.getPrefix($scope, 1),\r\n          ticksuffix: utils.getSuffix($scope, 1),\r\n        },\r\n        separators: utils.getSeparators($scope, 0),\r\n        dragmode: 'select',\r\n        margin: {\r\n          r: ($scope.layout.props.yAxisPosition == 'right') ? $scope.layout.props.marginRight + 70 : $scope.layout.props.marginRight,\r\n          l: ($scope.layout.props.yAxisPosition == 'left') ? $scope.layout.props.marginLeft + 70 : $scope.layout.props.marginLeft,\r\n          t: ($scope.layout.props.xAxisPosition == 'top') ? $scope.layout.props.marginTop + 70 : $scope.layout.props.marginTop,\r\n          b: ($scope.layout.props.xAxisPosition == 'bottom') ? $scope.layout.props.marginBottom + 70 : $scope.layout.props.marginBottom,\r\n        },\r\n      };\r\n\r\n      $.extend(options, customOptions);\r\n\r\n      const config = {\r\n        scrollZoom: true,\r\n        showLink: false,\r\n        displaylogo: false,\r\n        modeBarButtonsToRemove: ['sendDataToCloud'],\r\n      };\r\n\r\n      const chart = document.getElementById(elementId);\r\n      Plotly.plot(chart, data, options, config);\r\n\r\n      return chart;\r\n    },\r\n\r\n    /**\r\n     * setEvents - set events to the chart\r\n     *\r\n     * @param {type} chart Description\r\n     *\r\n     * @return {type} Description\r\n     */\r\n    setEvents(chart, $scope, app) {\r\n      // Event being triggered when point selections are made\r\n      chart.on('plotly_click', (eventData) => {\r\n        if (typeof eventData != 'undefined' && eventData.points.length > 0) {\r\n          const fields = eventData.points.map((d) => {\r\n            if (typeof d.text != 'undefined') {\r\n              const pointNumber = d.pointNumber;\r\n              return parseInt(d.data.elemNum[pointNumber], 10);\r\n            }\r\n          }).filter((x) => {\r\n            return typeof x !== 'undefined';\r\n          });\r\n          //app.field($scope.layout.props.dimensions[0].expression).selectValues(fields, true, true);\r\n          $scope.self.selectValues(0, fields, true);\r\n        }\r\n      });\r\n\r\n      // Event being triggered when range selections are made\r\n      chart.on('plotly_selected', (eventData) => {\r\n        if (typeof eventData != 'undefined' && eventData.points.length > 0) {\r\n          const fields = eventData.points.map((d) => {\r\n            return parseInt(d.text, 10);\r\n          });\r\n          app.field($scope.layout.props.dimensions[0].expression).selectValues(fields, true, true);\r\n        }\r\n      });\r\n      return null;\r\n    },\r\n  };\r\n});\r\n"
    ]
}