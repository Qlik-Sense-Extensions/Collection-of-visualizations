{
    "version": 3,
    "sources": [
        "chart/heatmap.js"
    ],
    "names": [
        "define",
        "Plotly",
        "utils",
        "draw",
        "$scope",
        "data",
        "elementId",
        "customOptions",
        "options",
        "annotations",
        "xaxis",
        "ticks",
        "side",
        "yaxis",
        "ticksuffix",
        "autosize",
        "autorange",
        "margin",
        "r",
        "layout",
        "props",
        "yAxisPosition",
        "marginRight",
        "l",
        "marginLeft",
        "t",
        "xAxisPosition",
        "marginTop",
        "b",
        "marginBottom",
        "$",
        "extend",
        "config",
        "scrollZoom",
        "showLink",
        "displaylogo",
        "modeBarButtonsToRemove",
        "chart",
        "document",
        "getElementById",
        "plot"
    ],
    "mappings": "AAAA,YAAAA,SACE,0BACA,iBACC,SAACC,EAAQC,GAYV,OACEC,KADK,SACAC,EAAQC,EAAMC,EAAWC,GAE5B,GAAMC,IACJC,eACAC,OACEC,MAAO,GACPC,KAAM,OAERC,OACEF,MAAO,GACPG,WAAY,IACZC,UAAU,EACVC,UAAW,YAEbC,QACEC,EAAyC,SAArCd,EAAOe,OAAOC,MAAMC,cAA4BjB,EAAOe,OAAOC,MAAME,YAAc,GAAKlB,EAAOe,OAAOC,MAAME,YAC/GC,EAAyC,QAArCnB,EAAOe,OAAOC,MAAMC,cAA2BjB,EAAOe,OAAOC,MAAMI,WAAa,GAAKpB,EAAOe,OAAOC,MAAMI,WAC7GC,EAAyC,OAArCrB,EAAOe,OAAOC,MAAMM,cAA0BtB,EAAOe,OAAOC,MAAMO,UAAY,GAAKvB,EAAOe,OAAOC,MAAMO,UAAY,GACvHC,EAAyC,UAArCxB,EAAOe,OAAOC,MAAMM,cAA6BtB,EAAOe,OAAOC,MAAMS,aAAe,GAAKzB,EAAOe,OAAOC,MAAMS,cAIrHC,GAAEC,OAAOvB,EAASD,EAElB,IAAMyB,IACJC,YAAY,EACZC,UAAU,EACVC,aAAa,EACbC,wBAAyB,oBAGrBC,EAAQC,SAASC,eAAejC,EAGtC,OAFAL,GAAOuC,KAAKH,EAAOhC,EAAMG,EAASwB,GAE3BK",
    "file": "../../js/chart/heatmap.js",
    "sourcesContent": [
        "define([\r\n  '../../vendor/plotly.min',\r\n  '../util/utils'\r\n], (Plotly, utils) => {\r\n\r\n  /**\r\n   * draw - Description\r\n   *\r\n   * @param {Object} $scope        angular $scope\r\n   * @param {Object} data          Data for chart\r\n   * @param {String} elementId     HTML element id to embed chart\r\n   * @param {Object} customOptions Custom chart options\r\n   *\r\n   * @return {Null} null\r\n   */\r\n  return {\r\n    draw($scope, data, elementId, customOptions) {\r\n\r\n      const options = {\r\n        annotations: [],\r\n        xaxis: {\r\n          ticks: '',\r\n          side: 'top',\r\n        },\r\n        yaxis: {\r\n          ticks: '',\r\n          ticksuffix: ' ',\r\n          autosize: false,\r\n          autorange: 'reversed',\r\n        },\r\n        margin: {\r\n          r: ($scope.layout.props.yAxisPosition == 'right') ? $scope.layout.props.marginRight + 70 : $scope.layout.props.marginRight,\r\n          l: ($scope.layout.props.yAxisPosition == 'left') ? $scope.layout.props.marginLeft + 70 : $scope.layout.props.marginLeft,\r\n          t: ($scope.layout.props.xAxisPosition == 'top') ? $scope.layout.props.marginTop + 80 : $scope.layout.props.marginTop + 10,\r\n          b: ($scope.layout.props.xAxisPosition == 'bottom') ? $scope.layout.props.marginBottom + 70 : $scope.layout.props.marginBottom,\r\n        },\r\n      };\r\n\r\n      $.extend(options, customOptions);\r\n\r\n      const config = {\r\n        scrollZoom: true,\r\n        showLink: false,\r\n        displaylogo: false,\r\n        modeBarButtonsToRemove: ['sendDataToCloud'],\r\n      };\r\n\r\n      const chart = document.getElementById(elementId);\r\n      Plotly.plot(chart, data, options, config);\r\n\r\n      return chart;\r\n    },\r\n  };\r\n});\r\n"
    ]
}