{
    "version": 3,
    "sources": [
        "chart/tree_chart.js"
    ],
    "names": [
        "define",
        "utils",
        "d3",
        "draw",
        "$scope",
        "app",
        "chartData",
        "elementId",
        "customOptions",
        "makeColorsLighterDarker",
        "c",
        "n",
        "i",
        "d",
        "join",
        "diagonal",
        "s",
        "path",
        "y",
        "x",
        "replaceParamNamesWithLabel",
        "description",
        "result",
        "paramNames",
        "length",
        "replace",
        "measureLabels",
        "update",
        "source",
        "treeData",
        "treemap",
        "root",
        "nodes",
        "descendants",
        "links",
        "slice",
        "forEach",
        "depth",
        "node",
        "svg",
        "selectAll",
        "data",
        "id",
        "nodeEnter",
        "enter",
        "append",
        "attr",
        "y0",
        "x0",
        "on",
        "click",
        "color",
        "style",
        "_children",
        "layout",
        "props",
        "bubbleSize",
        "text",
        "children",
        "displayResultsOnAllNodes",
        "levelsList",
        "yval",
        "yval2",
        "rpartMethod",
        "nodeUpdate",
        "merge",
        "transition",
        "duration",
        "select",
        "colorOpaque",
        "nodeExit",
        "exit",
        "remove",
        "link",
        "linkEnter",
        "insert",
        "o",
        "linkUpdate",
        "parent",
        "collapse",
        "collapseAll",
        "defaultCollapseLevel",
        "extWidth",
        "extHeight",
        "defineScreenSize",
        "self",
        "$element",
        "width",
        "height",
        "screenWidth",
        "screenHeight",
        "margin",
        "top",
        "right",
        "bottom",
        "left",
        "tree",
        "size",
        "hierarchy",
        "palette",
        "getDefaultPaletteColor",
        "colorDefault",
        "split",
        "map",
        "Number",
        "colorForMain",
        "colors"
    ],
    "mappings": "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",
    "file": "../../js/chart/tree_chart.js",
    "sourcesContent": [
        "define([\r\n  '../util/utils',\r\n  '../../vendor/d3.min',\r\n], (utils, d3) => {\r\n  return {\r\n    /**\r\n     * draw - draw chart\r\n     *\r\n     * @param {Object} $scope        angular $scope\r\n     * @param {Object} treeData          Data for chart\r\n     * @param {String} elementId     HTML element id to embed chart\r\n     * @param {Object} customOptions Custom chart options\r\n     *\r\n     * @return {Object} Chart object\r\n     */\r\n    draw($scope, app, chartData, elementId, customOptions) {\r\n      // Define width and hight of this extension\r\n      let extWidth = 0;\r\n      let extHeight = 0;\r\n\r\n      if ($scope.layout.props.defineScreenSize) {\r\n        // Screen size = Auto\r\n        extWidth = $scope.self.$element.width();\r\n        extHeight = $scope.self.$element.height() - 10;\r\n      } else {\r\n        // Screen size = Custom\r\n        extWidth = $scope.layout.props.screenWidth;\r\n        extHeight = $scope.layout.props.screenHeight;\r\n      }\r\n\r\n      // Set the dimensions and margins of the diagram\r\n      const margin = { top: 20, right: 90, bottom: 30, left: 90 };\r\n      const width = extWidth - margin.left - margin.right;\r\n      const height = extHeight - margin.top - margin.bottom;\r\n\r\n      // append the svg object to the extension HTML element\r\n      const svg = d3.select(`div#${elementId}`).append('svg')\r\n          .attr('width', width + margin.right + margin.left)\r\n          .attr('height', height + margin.top + margin.bottom)\r\n          .append('g')\r\n          .attr('transform', `translate(${margin.left}, ${margin.top})`);\r\n\r\n      let i = 0;\r\n      const duration = 750;\r\n\r\n      // declares a tree layout and assigns the size\r\n      const treemap = d3.tree().size([height, width]);\r\n\r\n      // Assigns parent, children, height, depth\r\n      const root = d3.hierarchy(chartData, (d) => { return d.children; });\r\n      root.x0 = height / 2;\r\n      root.y0 = 0;\r\n\r\n      // Palette color\r\n      const palette = utils.getDefaultPaletteColor();\r\n\r\n      // Make RGB color lighter or barker\r\n      function makeColorsLighterDarker(c,n,i,d) {for(i=3;i--;c[i]=d<0?0:d>255?255:d|0)d=c[i]+n;return c.join(','); }\r\n      const colorDefault = makeColorsLighterDarker(palette[3].split(',').map(Number), 100);\r\n      const colorForMain = makeColorsLighterDarker(palette[$scope.layout.props.colorForMain].split(',').map(Number), 100);\r\n\r\n      // Color selection\r\n      const color = ($scope.layout.props.colors) ? `rgba(${palette[3]},1)` : `rgba(${palette[$scope.layout.props.colorForMain]},1)`;\r\n      const colorOpaque = ($scope.layout.props.colors) ? `rgba(${colorDefault},1)` : `rgba(${colorForMain},1)`;\r\n\r\n      // Creates a curved (diagonal) path from parent to the child nodes\r\n      function diagonal(s, d) {\r\n        const path = `M ${s.y} ${s.x}\r\n                C ${(s.y + d.y) / 2} ${s.x},\r\n                  ${(s.y + d.y) / 2} ${d.x},\r\n                  ${d.y} ${d.x}`;\r\n        return path;\r\n      }\r\n\r\n      // Replace param names (q$meaX) to a measure label in description\r\n      function replaceParamNamesWithLabel(description) {\r\n        let result = description;\r\n        for (let i = 0; i < $scope.paramNames.length; i++) {\r\n          result = result.replace($scope.paramNames[i], $scope.measureLabels[i]);\r\n        }\r\n        return result;\r\n      }\r\n\r\n      function update(source) {\r\n        // Assigns the x and y position for the nodes\r\n        const treeData = treemap(root);\r\n\r\n        // Compute the new tree layout.\r\n        const nodes = treeData.descendants();\r\n        const links = treeData.descendants().slice(1);\r\n\r\n        // Normalize for fixed-depth.\r\n        nodes.forEach((d) => { d.y = d.depth * 180; });\r\n\r\n        // Update the nodes\r\n        const node = svg.selectAll('g.node')\r\n            .data(nodes, (d) => { return d.id || (d.id = ++i); });\r\n\r\n        // Enter any new modes at the parent's previous position.\r\n        const nodeEnter = node.enter().append('g')\r\n            .attr('class', 'node')\r\n            .attr('transform', () => {\r\n              return `translate(${source.y0}, ${source.x0})`;\r\n            })\r\n        .on('click', click);\r\n\r\n        // Add Circle for the nodes\r\n        nodeEnter.append('circle')\r\n            .attr('class', 'node')\r\n            .attr('r', 1e-6)\r\n            .attr('stroke', () => {\r\n              return color;\r\n            })\r\n            .style('fill', (d) => {\r\n              return d._children ? color : '#fff';\r\n            });\r\n\r\n        // Add labels for the nodes\r\n        nodeEnter.append('text')\r\n          .attr('dy', '.35em')\r\n          .attr('x', () => {\r\n            return (-1 * $scope.layout.props.bubbleSize) - 5;\r\n          })\r\n          .attr('text-anchor', () => {\r\n            return 'end';\r\n          })\r\n          .text((d) => {\r\n            return replaceParamNamesWithLabel(d.data.description);\r\n          });\r\n\r\n        // Add result for the end node\r\n        nodeEnter.append('text')\r\n          .attr('dy', '.35em')\r\n          .attr('x', () => {\r\n            return $scope.layout.props.bubbleSize + 5;\r\n          })\r\n          .attr('text-anchor', () => {\r\n            return 'start';\r\n          })\r\n          // .style('font-size', '20px')\r\n          .style('font-weight', 'bold')\r\n          .style('fill', color)\r\n          .text((d) => {\r\n            let result = '';\r\n            if (d.children || d._children) {\r\n              // Display result on all nodes when displayResultsOnAllNodes = true\r\n              if ($scope.layout.props.displayResultsOnAllNodes) {\r\n                result = `${$scope.levelsList[d.data.yval - 1]}`;\r\n                result += `(${d.data.yval2[0].slice(1, $scope.levelsList.length + 1).join('|')})`;\r\n                return result;\r\n              }\r\n            } else if ($scope.layout.props.rpartMethod === 'class') {\r\n              result = `${$scope.levelsList[d.data.yval - 1]}`;\r\n              result += `(${d.data.yval2[0].slice(1, $scope.levelsList.length + 1).join('|')})`;\r\n            } else {\r\n              result = `${d.data.yval}`;\r\n            }\r\n            return result;\r\n          });\r\n\r\n        // Update\r\n        const nodeUpdate = nodeEnter.merge(node);\r\n\r\n        // Transition to the proper position for the node\r\n        nodeUpdate.transition()\r\n          .duration(duration)\r\n          .attr('transform', (d) => {\r\n            return `translate(${d.y}, ${d.x})`;\r\n          });\r\n\r\n        // Update the node attributes and style\r\n        nodeUpdate.select('circle.node')\r\n          .attr('r', $scope.layout.props.bubbleSize)\r\n          .attr('stroke', () => {\r\n            return color;\r\n          })\r\n          .style('fill', (d) => {\r\n            return d._children ? colorOpaque : '#fff';\r\n          })\r\n          .attr('cursor', 'pointer');\r\n\r\n        // Remove any exiting nodes\r\n        const nodeExit = node.exit().transition()\r\n          .duration(duration)\r\n          .attr('transform', () => {\r\n            return `translate(${source.y}, ${source.x})`;\r\n          })\r\n          .remove();\r\n\r\n        // On exit reduce the node circles size to 0\r\n        nodeExit.select('circle')\r\n          .attr('r', 1e-6);\r\n\r\n        // On exit reduce the opacity of text labels\r\n        nodeExit.select('text')\r\n          .style('fill-opacity', 1e-6);\r\n\r\n        // Update the links\r\n        const link = svg.selectAll('path.link')\r\n          .data(links, (d) => { return d.id; });\r\n\r\n        // Enter any new links at the parent's previous position.\r\n        const linkEnter = link.enter().insert('path', 'g')\r\n          .attr('class', 'link')\r\n          .attr('stroke', () => {\r\n            return colorOpaque;\r\n          })\r\n          .attr('d', () => {\r\n            const o = { x: source.x0, y: source.y0 };\r\n            return diagonal(o, o);\r\n          });\r\n\r\n        // UPDATE\r\n        const linkUpdate = linkEnter.merge(link);\r\n\r\n        // Transition back to the parent element position\r\n        linkUpdate.transition()\r\n          .duration(duration)\r\n          .attr('d', (d) => { return diagonal(d, d.parent); });\r\n\r\n        // Remove any exiting links\r\n        const linkExit = link.exit().transition()\r\n          .duration(duration)\r\n          .attr('d', () => {\r\n            const o = { x: source.x, y: source.y };\r\n            return diagonal(o, o);\r\n          })\r\n          .remove();\r\n\r\n        // Store the old positions for transition.\r\n        nodes.forEach((d) => {\r\n          d.x0 = d.x;\r\n          d.y0 = d.y;\r\n        });\r\n      }\r\n\r\n      // Toggle children on click.\r\n      function click(d) {\r\n        if (d.children) {\r\n          d._children = d.children;\r\n          d.children = null;\r\n        } else {\r\n          d.children = d._children;\r\n          d._children = null;\r\n        }\r\n        update(d);\r\n      }\r\n\r\n      // Collapse the node and all it's children\r\n      function collapse(d) {\r\n        if (d.children) {\r\n          d._children = d.children;\r\n          d._children.forEach(collapse);\r\n          d.children = null;\r\n        }\r\n      }\r\n\r\n      // Collapse all child nodes\r\n      function collapseAll(d) {\r\n        if (d.children) {\r\n          d.children.forEach(collapseAll);\r\n          if (typeof $scope.layout.props.defaultCollapseLevel !== 'undefined' && d.depth >= $scope.layout.props.defaultCollapseLevel) {\r\n            collapse(d);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Collapse after the second level\r\n      root.children.forEach(collapseAll);\r\n\r\n      update(root);\r\n    },\r\n  };\r\n});\r\n"
    ]
}