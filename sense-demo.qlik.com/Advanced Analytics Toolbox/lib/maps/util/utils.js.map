{
    "version": 3,
    "sources": [
        "util/utils.js"
    ],
    "names": [
        "define",
        "d3",
        "$q",
        "displayDebugModeMessage",
        "debugMode",
        "console",
        "log",
        "getDebugSaveDatasetScript",
        "RDatasetName",
        "saveRDataset",
        "displayRScriptsToConsole",
        "scripts",
        "i",
        "length",
        "displayReturnedDatasetToConsole",
        "dataset",
        "pageExtensionData",
        "$scope",
        "callback",
        "_this",
        "this",
        "lastrow",
        "colNums",
        "layout",
        "qHyperCube",
        "qSize",
        "qcx",
        "datapageSize",
        "backendApi",
        "eachDataRow",
        "rownum",
        "row",
        "getRowCount",
        "requestPage",
        "qTop",
        "qLeft",
        "qWidth",
        "qHeight",
        "Math",
        "min",
        "getData",
        "then",
        "$",
        "each",
        "qDataPages",
        "key",
        "value",
        "concat",
        "qMatrix",
        "splitData",
        "splitDatasetFlag",
        "splitPercentage",
        "meaLen",
        "training",
        "test",
        "displayLoader",
        "extId",
        "html",
        "displayConnectionError",
        "getDefaultPaletteColor",
        "getTwelveColors",
        "getOneHundredColors",
        "setLocaleInfo",
        "app",
        "localeInfo",
        "getAppLayout",
        "qLocaleInfo",
        "thousandSep",
        "qThousandSep",
        "decimalSep",
        "qDecimalSep",
        "moneyFmt",
        "qMoneyFmt",
        "moneyThousandSep",
        "qMoneyThousandSep",
        "dateFmt",
        "qDateFmt",
        "validateDimension",
        "dimension",
        "result",
        "expression",
        "qStringExpression",
        "qExpr",
        "slice",
        "validateMeasure",
        "measure",
        "getTickFormat",
        "measureId",
        "props",
        "measures",
        "numberFormatting",
        "formatting",
        "numberFormattingSimple",
        "numberFormatPattern",
        "moneyFormatPattern",
        "customFormatPattern",
        "getSeparators",
        "getPrefix",
        "prefixSuffix",
        "customCurrency",
        "getSuffix",
        "getNumberFormat",
        "getLocale",
        "currency",
        "locale",
        "formatLocale",
        "decimal",
        "thousands",
        "grouping"
    ],
    "mappings": "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",
    "file": "../../js/util/utils.js",
    "sourcesContent": [
        "define([\r\n  '../../vendor/d3-format.min',\r\n], (d3, $q) => {\r\n  return {\r\n\r\n\r\n    /**\r\n     * displayDebugModeMessage - display Debug mode message\r\n     *\r\n     * @param  {Boolean} debugMode    debug mode flag\r\n     * @return {type}           description\r\n     */\r\n    displayDebugModeMessage(debugMode) {\r\n      if (debugMode) {\r\n        console.log('** Debug mode is ON **');\r\n      }\r\n    },\r\n\r\n    /**\r\n     * getDebugSaveDatasetScript - Return R script to store dataset\r\n     *\r\n     * @param  {Boolean} debugMode    debug mode flag\r\n     * @param  {String} RDatasetName R dataset name\r\n     * @return {String}              R script to store into R dataset\r\n     */\r\n    getDebugSaveDatasetScript(debugMode, RDatasetName) {\r\n      let saveRDataset = '';\r\n      if (debugMode) {\r\n        console.log(`** Records passed to R is to be saved into ${RDatasetName}. `);\r\n        saveRDataset = `save(q,file=\"~/${RDatasetName}\");`;\r\n      } else {\r\n      }\r\n      return saveRDataset;\r\n    },\r\n\r\n\r\n    /**\r\n     * displayRScriptsToConsole - Display R Scripts to console\r\n     *\r\n     * @param  {Boolean} debugMode    debug mode flag\r\n     * @param  {Array} scripts   R scripts contained in measures\r\n     */\r\n    displayRScriptsToConsole(debugMode, scripts) {\r\n      if (debugMode) {\r\n        console.log('** R Scripts for measures:');\r\n        for(let i = 0; i < scripts.length; i++) {\r\n          console.log(scripts[i]);\r\n        }\r\n      }\r\n    },\r\n\r\n\r\n    /**\r\n     * displayReturnedDatasetToConsole - display returned dataset to console\r\n     *\r\n     * @param  {Boolean} debugMode    debug mode flag\r\n     * @param  {Object} dataset   dataset returned from engine\r\n     */\r\n    displayReturnedDatasetToConsole(debugMode, dataset) {\r\n      if (debugMode) {\r\n        console.log('** Recieved data from engine:')\r\n        console.log(dataset);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * pageExtensionData - Iterate through all datapages of hypercube\r\n     *\r\n     * @param  {Object} $scope   angular $scope\r\n     * @param  {Object} callback callback function\r\n     */\r\n    pageExtensionData($scope, callback) {\r\n      let lastrow = 0;\r\n      const colNums = $scope.layout.qHyperCube.qSize.qcx;\r\n\r\n      // initialProperty sets 1500 for dataFetch hight\r\n      const datapageSize = 1500;\r\n\r\n      $scope.backendApi.eachDataRow((rownum, row) => {\r\n        lastrow = rownum;\r\n      });\r\n      if ($scope.backendApi.getRowCount() > lastrow + 1) {\r\n        const requestPage = [{\r\n          qTop: lastrow + 1,\r\n          qLeft: 0,\r\n          qWidth: colNums,\r\n          qHeight: Math.min(datapageSize, $scope.backendApi.getRowCount() - lastrow),\r\n        }];\r\n        $scope.backendApi.getData(requestPage).then(() => {\r\n          this.pageExtensionData($scope, callback);\r\n        });\r\n      } else {\r\n        let dataset = [];\r\n        $.each($scope.layout.qHyperCube.qDataPages, (key, value) => {\r\n          dataset = dataset.concat(value.qMatrix);\r\n        });\r\n        callback(dataset);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * splitDataset - Create R Script to split input data into training and test datasets\r\n     *\r\n     * @param  {Object} layout Layout\r\n     * @param  {Number} meaLen Length of measures\r\n     * @return {String}        R script to split datasets\r\n     */\r\n    splitData(splitDatasetFlag, splitPercentage, meaLen) {\r\n      let splitData = 'training_data<-q;';\r\n      if (splitDatasetFlag) {\r\n        let training = `splitPercentage<-min(max(0.01, ${splitPercentage}), 0.99); data_end<-length(q$mea0); data_mid<-floor(data_end * splitPercentage); training_data<-list(mea0=q$mea0[1:data_mid]`;\r\n        let test = 'test_data<-list(mea0=q$mea0[(data_mid + 1):data_end]';\r\n        for (let i = 1; i < meaLen; i++) {\r\n          training += `,mea${i}=q$mea${i}[1:data_mid]`;\r\n          test += `,mea${i}=q$mea${i}[(data_mid + 1):data_end]`;\r\n        }\r\n        training += ');';\r\n        test += ');';\r\n        splitData = training + test;\r\n      }\r\n      return splitData;\r\n    },\r\n\r\n    /**\r\n     * displayLoader - Display loader circle\r\n     *\r\n     * @param {String} extId extension ID\r\n     *\r\n     */\r\n    displayLoader(extId){\r\n        $(`.advanced-analytics-toolsets-${extId}`).html(`\r\n          <div style=\"height:100%; width:100%\">\r\n            <p style=\"position:relative;top:38%\" class=\"qui-pleasewaitdialog-loader-container\">\r\n              <img src=\"../resources/img/core/loader.svg\"/>\r\n            </p>\r\n          </div>`);\r\n    },\r\n\r\n    /**\r\n     * displayConnectionError - Display connection error\r\n     *\r\n     * @param {type} extId extension ID\r\n     *\r\n     */\r\n    displayConnectionError(extId) {\r\n      $(`.advanced-analytics-toolsets-${extId}`).html('<div class=\"requirements-wrapper incomplete\"><div class=\"requirements\"><p class=\"incomplete-text\">Error occured when retrieveing data from R.</p></div></div>');\r\n    },\r\n\r\n    /**\r\n     * getDefaultPaletteColor - Return an array of Qlik Sense default 12 colors\r\n     *\r\n     * @return {Object} Array of Qlik Sense default 12 colors\r\n     */\r\n    getDefaultPaletteColor() {\r\n      return ['176,175,174', '123,122,120', '84,83,82', '68,119,170', '125,184,218', '182,215,234', '70,198,70', '249,63,23', '255,207,2', '39,110,39', '255,255,255', '0,0,0'];\r\n    },\r\n    /**\r\n     * getDefaultPaletteColor - Return an array of Qlik Sense 12 colors\r\n     *\r\n     * @return {Object} Array of Qlik Sense 12 colors\r\n     */\r\n    getTwelveColors() {\r\n      return ['51,34,136', '102,153,204', '136,204,238', '68,170,153', '17,119,51', '153,153,51', '221,204,119', '102,17,0', '204,102,119', '170,68,102', '136,34,85', '170,68,153'];\r\n    },\r\n    /**\r\n     * getDefaultPaletteColor - Return an array of Qlik Sense 100 colors\r\n     *\r\n     * @return {Object} Array of Qlik Sense  100 colors\r\n     */\r\n    getOneHundredColors() {\r\n      return ['153,200,103', '228,60,208', '226,64,42', '102,168,219', '63,26,32', '229,170,135', '60,107,89', '170,42,107', '233,176,46', '120,100,221', '101,233,60', '92,228,186', '208,224,218', '215,150,22',\r\n        '100,72,123', '228,231,43', '111,115,48', '147,40,52', '174,108,125', '152,103,23', '227,203,112', '64,140,29', '221,50,95', '83,61,28', '42,60,84', '219,113,39', '114,227,226', '226,193,218',\r\n        '212,117,85', '125,127,129', '84,174,155', '233,218,166', '58,136,85', '91,230,110', '171,57,164', '166,227,50', '108,70,157', '227,158,81', '79,28,66', '39,60,28', '170,151,46', '139,179,42',\r\n        '189,236,165', '99,236,155', '156,53,25', '170,164,132', '114,37,109', '77,116,159', '152,132,223', '229,144,184', '68,182,43', '173,87,146', '198,93,234', '230,112,202', '227,135,131', '41,49,45',\r\n        '106,44,30', '215,177,170', '177,231,195', '205,193,52', '158,231,100', '86,184,206', '44,99,35', '101,70,74', '177,207,234', '60,116,129', '58,78,150', '100,147,225', '219,86,86', '116,114,89',\r\n        '187,171,228', '227,63,146', '208,96,125', '117,159,121', '157,107,94', '133,116,174', '126,48,76', '173,143,172', '75,119,222', '100,126,23', '185,195,121', '141,168,176', '185,114,217', '120,98,121',\r\n        '126,192,125', '145,100,54', '45,39,79', '220,230,128', '117,151,72', '218,230,90', '69,156,73', '183,147,74', '81,198,113', '158,173,63', '150,154,92', '185,151,106', '70,83,26', '192,240,132',\r\n        '118,193,70', '186,208,173'];\r\n    },\r\n    /**\r\n     * setLocaleInfo - Set locale infomation to angular $scope\r\n     *\r\n     * @param {Object} $scope angular $scope\r\n     * @param {Object} app    reference to app\r\n     *\r\n     */\r\n    setLocaleInfo($scope, app) {\r\n      $scope.localeInfo = [];\r\n      app.getAppLayout((layout) => {\r\n        const localeInfo = layout.qLocaleInfo;\r\n\r\n        $scope.localeInfo.thousandSep = localeInfo.qThousandSep;\r\n        $scope.localeInfo.decimalSep = localeInfo.qDecimalSep;\r\n        $scope.localeInfo.moneyFmt = localeInfo.qMoneyFmt;\r\n        $scope.localeInfo.moneyThousandSep = localeInfo.qMoneyThousandSep;\r\n        $scope.localeInfo.dateFmt = localeInfo.qDateFmt;\r\n      });\r\n    },\r\n\r\n    /**\r\n     * validateDimension - Recieve dimension object and return field value\r\n     *\r\n     * @param {Object} dimension Dimension data (layout.props.dimensions[i])\r\n     *\r\n     * @return {String} Dimension field value\r\n     */\r\n    validateDimension(dimension) {\r\n      // Set definitions for dimensions and measures. When qStringExpression.qExpr is defined, it is used as a dimension expression.\r\n      var result = (typeof dimension.expression.qStringExpression != 'undefined') ? dimension.expression.qStringExpression.qExpr : dimension.expression;\r\n\r\n      // When dimension expression does not include space and blanketd with [], replace [].\r\n      if (!/\\s/.test(result) && /^\\[.*]$/.test(result)) {\r\n        result = result.slice(1, -1);\r\n      }\r\n\r\n      return result;\r\n    },\r\n    /**\r\n     * validateMeasure - Recieve measure object and return measure expression value\r\n     *\r\n     * @param {Object} measure Measure data (layout.props.measures[i])\r\n     *\r\n     * @return {String} Measure expression value\r\n     */\r\n    validateMeasure(measure) {\r\n      // Set definitions for dimensions and measures. When qStringExpression.qExpr is defined, it is used as a dimension expression.\r\n      var result = (typeof measure.expression.qStringExpression != 'undefined') ? measure.expression.qStringExpression.qExpr : measure.expression;\r\n\r\n      // When dimension expression does not include space and blanketd with [], replace [].\r\n      if (!/\\s/.test(result) && /^\\[.*]$/.test(result)) {\r\n        result = result.slice(1, -1);\r\n      }\r\n\r\n      return result;\r\n    },\r\n    /**\r\n     * getTickFormat - Retrieve number format settings from a measure and return number format string\r\n     *\r\n     * @param {Object} $scope    angular $scope\r\n     * @param {Number} measureId Measure ID\r\n     *\r\n     * @return {String} Number format string\r\n     */\r\n    getTickFormat($scope, measureId) {\r\n      let result = '';\r\n      const layout = $scope.layout;\r\n      const measure = layout.props.measures[measureId];\r\n      const numberFormatting = layout.props.measures[measureId].numberFormatting;\r\n\r\n      // Number formatting = Auto\r\n      if (typeof numberFormatting == 'undefined' || numberFormatting == '0') {\r\n        result = '';\r\n      // Number formatting = Number\r\n      } else if (numberFormatting == '1') {\r\n        // Formatting = Simple\r\n        if (typeof measure.formatting == 'undefined' || measure.formatting == true) {\r\n          switch (measure.numberFormattingSimple) {\r\n            // Number formatting\r\n            case 0: // 1,000\r\n              result = ',.0f';\r\n              break;\r\n            case 1: // 1,000.1\r\n              result = ',.1f';\r\n              break;\r\n            case 2: // 1,000.12\r\n              result = ',.2f';\r\n              break;\r\n            case 3: // 12%\r\n              result = '.0%';\r\n              break;\r\n            case 4: // 12.1%\r\n              result = '.1%';\r\n              break;\r\n            case 5: // 12.12%\r\n              result = '.2%';\r\n              break;\r\n            default:\r\n              result = ',.2f';\r\n              break;\r\n          }\r\n        // Formatting = Custom\r\n        } else {\r\n          result = measure.numberFormatPattern;\r\n        }\r\n      // Number formatting = Money\r\n      } else if (numberFormatting == '2') {\r\n        result = (typeof measure.moneyFormatPattern == 'undefined') ? ',.2f' : measure.moneyFormatPattern;\r\n      // Number formatting = Custom\r\n      } else if (numberFormatting == '5') {\r\n        result = (typeof measure.customFormatPattern == 'undefined') ? ',.2f' : measure.customFormatPattern;\r\n      } else {\r\n        result = '';\r\n      }\r\n      return result;\r\n    },\r\n    /**\r\n     * getSeparators - Get and return separators value from the locale setting\r\n     *\r\n     * @param {Object} $scope    angular $scope\r\n     * @param {Number} measureId Measure ID\r\n     *\r\n     * @return {String} Combination of decimal separator and thousand separator\r\n     */\r\n    getSeparators($scope, measureId) {\r\n      const layout = $scope.layout;\r\n      const measure = layout.props.measures[measureId];\r\n      let result = '';\r\n      result = $scope.localeInfo.decimalSep + $scope.localeInfo.thousandSep;\r\n      return result;\r\n    },\r\n\r\n    /**\r\n     * getPrefix - Return currency symbol as a prefix\r\n     *\r\n     * @param {Object} $scope    angular $scope\r\n     * @param {Number} measureId Measure ID\r\n     *\r\n     * @return {String} Currency symbol\r\n     */\r\n    getPrefix($scope, measureId) {\r\n      const layout = $scope.layout;\r\n      const measure = layout.props.measures[measureId];\r\n      const numberFormatting = layout.props.measures[measureId].numberFormatting;\r\n      let result = '';\r\n\r\n      // Return $ when customCurrency value is not set\r\n      if (numberFormatting == '2' && (typeof measure.prefixSuffix == 'undefined' || measure.prefixSuffix == 'prefix')) {\r\n        result = (typeof measure.customCurrency == 'undefined') ? '$' : measure.customCurrency;\r\n      }\r\n      return result;\r\n    },\r\n    /**\r\n     * getSuffix - Return currency symbol as a suffix\r\n     *\r\n     * @param {Object} $scope    angular $scope\r\n     * @param {Number} measureId Measure ID\r\n     *\r\n     * @return {String} Currency symbol\r\n     */\r\n    getSuffix($scope, measureId) {\r\n      const layout = $scope.layout;\r\n      const measure = layout.props.measures[measureId];\r\n      const numberFormatting = layout.props.measures[measureId].numberFormatting;\r\n      let result = '';\r\n\r\n      // Return $ when customCurrency value is not set\r\n      if (numberFormatting == '2' && measure.prefixSuffix == 'suffix') {\r\n        result = (typeof measure.customCurrency == 'undefined') ? '$' : measure.customCurrency;\r\n      }\r\n      return result;\r\n    },\r\n    /**\r\n     * getNumberFormat - This is a wrapper function of getTickFormat. This is used to\r\n     *                   fill the gap between the handling on formatting by plotly.js and d3-format.\r\n     *\r\n     * @param {Object} $scope    angular $scope\r\n     * @param {Number} measureId Measure ID\r\n     *\r\n     * @return {String} Number format string\r\n     */\r\n    getNumberFormat($scope, measureId) {\r\n      const layout = $scope.layout;\r\n      const measure = layout.props.measures[measureId];\r\n      const numberFormatting = layout.props.measures[measureId].numberFormatting;\r\n      let result = this.getTickFormat($scope, measureId);\r\n\r\n      // Default formatting\r\n      if (result === '') {\r\n        result = '.2s';\r\n      }\r\n\r\n      // Money formatting\r\n      if (numberFormatting == '2') {\r\n        result = '$' + result;\r\n      }\r\n\r\n      return result;\r\n    },\r\n    /**\r\n     * getLocale - Description\r\n     *\r\n     * @param {Object} $scope    angular $scope\r\n     * @param {Number} measureId Measure ID\r\n     *\r\n     * @return {Object} locale format data of d3-format\r\n     */\r\n    getLocale($scope, measureId) {\r\n      const layout = $scope.layout;\r\n      const measure = layout.props.measures[measureId];\r\n      const numberFormatting = layout.props.measures[measureId].numberFormatting;\r\n\r\n      let currency = ['$', ''];\r\n\r\n      if (numberFormatting == '2' && (typeof measure.prefixSuffix == 'undefined' || measure.prefixSuffix == 'prefix')) {\r\n        currency = (typeof measure.customCurrency == 'undefined') ? ['$', ''] : [measure.customCurrency, ''];\r\n      } else if (numberFormatting == '2' && measure.prefixSuffix == 'suffix') {\r\n        currency = (typeof measure.customCurrency == 'undefined') ? ['', '$'] : ['' ,measure.customCurrency];\r\n      } else {\r\n        // do nothing\r\n      }\r\n\r\n      const locale = d3.formatLocale({\r\n        decimal: $scope.localeInfo.decimalSep,\r\n        thousands: $scope.localeInfo.thousandSep,\r\n        grouping: [3],\r\n        currency,\r\n      });\r\n\r\n      return locale;\r\n    },\r\n  };\r\n});\r\n"
    ]
}