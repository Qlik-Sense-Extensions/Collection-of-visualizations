{
    "version": 3,
    "sources": [
        "analysis/timeseries_decomposition.js"
    ],
    "names": [
        "define",
        "lineChart",
        "utils",
        "$q",
        "createCube",
        "app",
        "$scope",
        "layout",
        "dimension",
        "validateDimension",
        "props",
        "dimensions",
        "qNullSuppression",
        "qDef",
        "qFieldDefs",
        "measure",
        "validateMeasure",
        "measures",
        "displayDebugModeMessage",
        "debugMode",
        "saveRDataset",
        "getDebugSaveDatasetScript",
        "defMea1",
        "frequency",
        "seasonal",
        "defMea2",
        "defMea3",
        "displayRScriptsToConsole",
        "qLabel",
        "backendApi",
        "applyPatches",
        "qPath",
        "qOp",
        "qValue",
        "JSON",
        "stringify",
        "patchApplied",
        "drawChart",
        "defer",
        "requestPage",
        "qTop",
        "qLeft",
        "qWidth",
        "qHeight",
        "getData",
        "then",
        "dataPages",
        "measureInfo",
        "qHyperCube",
        "qMeasureInfo",
        "isNaN",
        "qMin",
        "qMax",
        "displayConnectionError",
        "extId",
        "displayReturnedDatasetToConsole",
        "elemNum",
        "dim",
        "mea",
        "palette",
        "getDefaultPaletteColor",
        "chartData",
        "_loop",
        "i",
        "$",
        "each",
        "qMatrix",
        "key",
        "value",
        "push",
        "qElemNumber",
        "qText",
        "qNum",
        "dataset",
        "x",
        "y",
        "name",
        "mode",
        "fill",
        "line",
        "fillcolor",
        "colors",
        "colorForMain",
        "marker",
        "color",
        "size",
        "datapoints",
        "pointRadius",
        "width",
        "borderWidth",
        "decomposeInFourCharts",
        "xaxis",
        "yaxis",
        "html",
        "chart",
        "customOptions",
        "showlegend",
        "showLegend",
        "showgrid",
        "xScale",
        "title",
        "domain",
        "yScale",
        "tickformat",
        "getTickFormat",
        "tickprefix",
        "getPrefix",
        "ticksuffix",
        "getSuffix",
        "yaxis2",
        "anchor",
        "yaxis3",
        "yaxis4",
        "dragmode",
        "margin",
        "r",
        "yAxisPosition",
        "marginRight",
        "l",
        "marginLeft",
        "t",
        "xAxisPosition",
        "marginTop",
        "b",
        "marginBottom",
        "draw",
        "setEvents",
        "resolve",
        "promise"
    ],
    "mappings": "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",
    "file": "../../js/analysis/timeseries_decomposition.js",
    "sourcesContent": [
        "define([\r\n  '../chart/line_chart',\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (lineChart, utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const dimensions = [{\r\n        qNullSuppression: true,\r\n        qDef: {\r\n          qFieldDefs: [dimension]\r\n        },\r\n      }];\r\n\r\n      const measure = utils.validateMeasure(layout.props.measures[0]);\r\n\r\n      // Debug mode - set R dataset name to store the q data.\r\n      utils.displayDebugModeMessage(layout.props.debugMode);\r\n      const saveRDataset = utils.getDebugSaveDatasetScript(layout.props.debugMode, 'debug_timeseries_decomposition.rda');\r\n\r\n      const defMea1 = `R.ScriptEval('${saveRDataset} library(dplyr);data<-ts(q$Measure,frequency=${layout.props.frequency});(decompose(data, type=\"${layout.props.seasonal}\")$trend);', ${measure} as Measure)`;\r\n      const defMea2 = `R.ScriptEval('library(dplyr);data<-ts(q$Measure,frequency=${layout.props.frequency});(decompose(data, type=\"${layout.props.seasonal}\")$seasonal);', ${measure} as Measure)`;\r\n      const defMea3 = `R.ScriptEval('library(dplyr);data<-ts(q$Measure,frequency=${layout.props.frequency});(decompose(data, type=\"${layout.props.seasonal}\")$random);', ${measure} as Measure)`\r\n\r\n      // Debug mode - display R Scripts to console\r\n      utils.displayRScriptsToConsole(layout.props.debugMode, [defMea1, defMea2, defMea3]);\r\n\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: measure,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qDef: defMea1,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qDef: defMea2,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qDef: defMea3,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * drawChart - draw chart with updated data\r\n     *\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Object} Promise object\r\n     */\r\n    drawChart($scope, app) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      // const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1500,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\r\n\r\n        // Display error when all measures' grand total return NaN.\r\n        if (isNaN(measureInfo[1].qMin) && isNaN(measureInfo[1].qMax)\r\n          && isNaN(measureInfo[2].qMin) && isNaN(measureInfo[2].qMax)\r\n          && isNaN(measureInfo[3].qMin) && isNaN(measureInfo[3].qMax)\r\n        ) {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          // Debug mode - display returned dataset to console\r\n          utils.displayReturnedDatasetToConsole(layout.props.debugMode, dataPages[0]);\r\n\r\n          let elemNum;\r\n          let dim;\r\n          let mea;\r\n          const palette = utils.getDefaultPaletteColor();\r\n\r\n          const chartData = [];\r\n          for (let i = 1; i < 5; i++) {\r\n            elemNum = [];\r\n            dim = [];\r\n            mea = [];\r\n\r\n            $.each(dataPages[0].qMatrix, (key, value) => {\r\n              elemNum.push(value[0].qElemNumber);\r\n              dim.push(value[0].qText);\r\n              mea.push(value[i].qNum);\r\n            });\r\n            const dataset = {\r\n              x: dim,\r\n              y: mea,\r\n              elemNum,\r\n              name: (i === 1) ? 'Observed' : (i === 2) ? 'Trend' : (i === 3) ? 'Seasonal' : (i === 4) ? 'Random' : '',\r\n              mode: 'lines+markers',\r\n              fill: layout.props.line,\r\n              fillcolor: (layout.props.colors) ? `rgba(${palette[3]},0.3)` : `rgba(${palette[layout.props.colorForMain]},0.3)`,\r\n              marker: {\r\n                color: (layout.props.colors) ? `rgba(${palette[3]},1)` : `rgba(${palette[layout.props.colorForMain]},1)`,\r\n                size: (layout.props.datapoints) ? layout.props.pointRadius : 1,\r\n              },\r\n              line: {\r\n                width: layout.props.borderWidth,\r\n              },\r\n            };\r\n\r\n            if (layout.props.decomposeInFourCharts && i != 4) {\r\n              dataset.xaxis = 'x';\r\n              dataset.yaxis = 'y' + (5 - i);\r\n            }\r\n\r\n            chartData.push(dataset);\r\n          } // end of for loop\r\n\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:100%;\"></div>`);\r\n\r\n          let chart = '';\r\n          if (layout.props.decomposeInFourCharts) {\r\n            const customOptions = {\r\n              showlegend: $scope.layout.props.showLegend,\r\n              xaxis: {\r\n                showgrid: $scope.layout.props.xScale,\r\n              },\r\n              yaxis: {\r\n                title: 'Random',\r\n                domain: [0, 0.24],\r\n                showgrid: $scope.layout.props.yScale,\r\n                tickformat: utils.getTickFormat($scope, 0),\r\n                tickprefix: utils.getPrefix($scope, 0),\r\n                ticksuffix: utils.getSuffix($scope, 0),\r\n              },\r\n              yaxis2: {\r\n                title: 'Seasonal',\r\n                domain: [0.25, 0.49],\r\n                anchor: 'x2',\r\n                showgrid: $scope.layout.props.yScale,\r\n                tickformat: utils.getTickFormat($scope, 0),\r\n                tickprefix: utils.getPrefix($scope, 0),\r\n                ticksuffix: utils.getSuffix($scope, 0),\r\n              },\r\n              yaxis3: {\r\n                title: 'Trend',\r\n                domain: [0.5, 0.74],\r\n                anchor: 'x3',\r\n                showgrid: $scope.layout.props.yScale,\r\n                tickformat: utils.getTickFormat($scope, 0),\r\n                tickprefix: utils.getPrefix($scope, 0),\r\n                ticksuffix: utils.getSuffix($scope, 0),\r\n              },\r\n              yaxis4: {\r\n                title: 'Observed',\r\n                domain: [0.74, 1],\r\n                anchor: 'x4',\r\n                showgrid: $scope.layout.props.yScale,\r\n                tickformat: utils.getTickFormat($scope, 0),\r\n                tickprefix: utils.getPrefix($scope, 0),\r\n                ticksuffix: utils.getSuffix($scope, 0),\r\n              },\r\n              dragmode: 'select',\r\n              margin: {\r\n                r: ($scope.layout.props.yAxisPosition == 'right') ? $scope.layout.props.marginRight + 70 : $scope.layout.props.marginRight,\r\n                l: ($scope.layout.props.yAxisPosition == 'left') ? $scope.layout.props.marginLeft + 70 : $scope.layout.props.marginLeft,\r\n                t: ($scope.layout.props.xAxisPosition == 'top') ? $scope.layout.props.marginTop + 70 : $scope.layout.props.marginTop,\r\n                b: ($scope.layout.props.xAxisPosition == 'bottom') ? $scope.layout.props.marginBottom + 70 : $scope.layout.props.marginBottom,\r\n              },\r\n            }\r\n            chart = lineChart.draw($scope, chartData, `aat-chart-${$scope.extId}`, customOptions);\r\n          } else {\r\n            chart = lineChart.draw($scope, chartData, `aat-chart-${$scope.extId}`, null);\r\n          }\r\n          lineChart.setEvents(chart, $scope, app);\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"
    ]
}