{
    "version": 3,
    "sources": [
        "analysis/pca_biplot.js"
    ],
    "names": [
        "define",
        "bubbleChart",
        "utils",
        "$q",
        "createCube",
        "app",
        "$scope",
        "layout",
        "dimension",
        "validateDimension",
        "props",
        "dimensions",
        "qNullSuppression",
        "qDef",
        "qFieldDefs",
        "meaLen",
        "measures",
        "length",
        "rowsLabel",
        "validateMeasure",
        "params",
        "meaList",
        "dataType",
        "i",
        "mea",
        "param",
        "push",
        "displayDebugModeMessage",
        "debugMode",
        "saveRDataset",
        "getDebugSaveDatasetScript",
        "defMea1",
        "displayRScriptsToConsole",
        "qLabel",
        "backendApi",
        "applyPatches",
        "qPath",
        "qOp",
        "qValue",
        "JSON",
        "stringify",
        "patchApplied",
        "drawChart",
        "defer",
        "requestPage",
        "qTop",
        "qLeft",
        "qWidth",
        "qHeight",
        "getData",
        "then",
        "dataPages",
        "qHyperCube",
        "qMeasureInfo",
        "qMatrix",
        "qText",
        "displayConnectionError",
        "extId",
        "displayReturnedDatasetToConsole",
        "palette",
        "getDefaultPaletteColor",
        "elemNum",
        "dim1",
        "$",
        "each",
        "key",
        "value",
        "qElemNumber",
        "result",
        "parse",
        "x",
        "rotation",
        "mea1",
        "mea2",
        "allMea1",
        "allMea2",
        "Math",
        "abs",
        "maxValMea1",
        "max",
        "apply",
        "maxValMea2",
        "chartData",
        "y",
        "xaxis",
        "yaxis",
        "text",
        "name",
        "mode",
        "type",
        "marker",
        "color",
        "colors",
        "colorForMain",
        "size",
        "bubbleSize",
        "arrowX",
        "arrowY",
        "allArrowX",
        "allArrowY",
        "maxValArrowX",
        "maxValArrowY",
        "customOptions",
        "title",
        "titlefont",
        "showgrid",
        "xScale",
        "tickfont",
        "overlaying",
        "side",
        "range",
        "yScale",
        "xaxis2",
        "yaxis2",
        "margin",
        "r",
        "yAxisPosition",
        "marginRight",
        "l",
        "marginLeft",
        "t",
        "xAxisPosition",
        "marginTop",
        "b",
        "marginBottom",
        "annotations",
        "xref",
        "yref",
        "ax",
        "ay",
        "axref",
        "ayref",
        "showarrow",
        "arrowcolor",
        "colorForSub",
        "arrowhead",
        "font",
        "html",
        "chart",
        "draw",
        "setEvents",
        "resolve",
        "promise"
    ],
    "mappings": "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",
    "file": "../../js/analysis/pca_biplot.js",
    "sourcesContent": [
        "define([\r\n  '../chart/bubble_chart',\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (bubbleChart, utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const dimensions = [{\r\n        qNullSuppression: true,\r\n        qDef: {\r\n          qFieldDefs: [dimension]\r\n        },\r\n      }];\r\n\r\n      const meaLen = layout.props.measures.length;\r\n      $scope.rowsLabel = [utils.validateMeasure(layout.props.measures[0])]; // Label for dimension values\r\n      let params = `${utils.validateMeasure(layout.props.measures[0])} as mea0`;\r\n      let meaList = 'q$mea0';\r\n      let dataType = 'N';\r\n\r\n      for (let i = 1; i < meaLen; i++) {\r\n        const mea = utils.validateMeasure(layout.props.measures[i]);\r\n        if (mea.length > 0) {\r\n          const param = `,${mea} as mea${i}`;\r\n          params += param;\r\n          meaList += `,q$mea${i}`;\r\n          dataType += 'N';\r\n\r\n          $scope.rowsLabel.push(utils.validateMeasure(layout.props.measures[i]));\r\n        }\r\n      }\r\n\r\n      // Debug mode - set R dataset name to store the q data.\r\n      utils.displayDebugModeMessage(layout.props.debugMode);\r\n      const saveRDataset = utils.getDebugSaveDatasetScript(layout.props.debugMode, 'debug_pca_biplot.rda');\r\n\r\n      const defMea1 = `R.ScriptEvalExStr('${dataType}','${saveRDataset} library(jsonlite); pca_result<-prcomp(data.frame(${meaList}), scale = TRUE); json<-toJSON(list(summary(pca_result)$x, summary(pca_result)$rotation)); json;',${params})`;\r\n\r\n      // Debug mode - display R Scripts to console\r\n      utils.displayRScriptsToConsole(layout.props.debugMode, [defMea1]);\r\n\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: defMea1,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n    /**\r\n    * drawChart - draw chart with updated data\r\n    *\r\n    * @param {Object} $scope angular $scope\r\n    *\r\n    * @return {Object} Promise object\r\n    */\r\n    drawChart($scope, app) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1500,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\r\n\r\n        // Display error when all measures' grand total return NaN.\r\n        if (dataPages[0].qMatrix[0][1].qText.length === 0 || dataPages[0].qMatrix[0][1].qText == '-') {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          // Debug mode - display returned dataset to console\r\n          utils.displayReturnedDatasetToConsole(layout.props.debugMode, dataPages[0]);\r\n\r\n          const palette = utils.getDefaultPaletteColor();\r\n\r\n          // Get dimension\r\n          const elemNum = [];\r\n          const dim1 = [];\r\n\r\n          $.each(dataPages[0].qMatrix, (key, value) => {\r\n            elemNum.push(value[0].qElemNumber);\r\n            dim1.push(value[0].qText);\r\n          });\r\n\r\n          // Get PCA result\r\n          const result = JSON.parse(dataPages[0].qMatrix[0][1].qText);\r\n          const x = result[0];\r\n          const rotation = result[1];\r\n\r\n          // Draw plot for pca_result$x\r\n          const mea1 = [];\r\n          const mea2 = [];\r\n          const allMea1 = [];\r\n          const allMea2 = [];\r\n\r\n          $.each(x, (key, value) => {\r\n            mea1.push(value[0]);\r\n            mea2.push(value[1]);\r\n            allMea1.push(Math.abs(value[0]));\r\n            allMea2.push(Math.abs(value[1]));\r\n          });\r\n\r\n          const maxValMea1 = Math.max.apply(null, allMea1);\r\n          const maxValMea2 = Math.max.apply(null, allMea2);\r\n\r\n          const chartData = [\r\n            {\r\n              x: mea1,\r\n              y: mea2,\r\n              xaxis: 'x2',\r\n              yaxis: 'y2',\r\n              text: dim1,\r\n              elemNum,\r\n              name: dimension,\r\n              mode: 'markers',\r\n              type: 'scatter',\r\n              marker: {\r\n                color: (layout.props.colors) ? `rgba(${palette[3]},0.8)` : `rgba(${palette[layout.props.colorForMain]},0.8)`,\r\n                size: layout.props.bubbleSize,\r\n              },\r\n            },\r\n          ];\r\n\r\n          // Draw annotation line for pca_result$rotation\r\n          const arrowX = [];\r\n          const arrowY = [];\r\n          const allArrowX = [];\r\n          const allArrowY = [];\r\n\r\n          $.each(rotation, (key, value) => {\r\n            arrowX.push(value[0]);\r\n            arrowY.push(value[1]);\r\n            allArrowX.push(Math.abs(value[0]));\r\n            allArrowY.push(Math.abs(value[1]));\r\n          });\r\n\r\n          const maxValArrowX = Math.max.apply(null, allArrowX);\r\n          const maxValArrowY = Math.max.apply(null, allArrowY);\r\n\r\n          const customOptions = {\r\n            xaxis: {\r\n              title: 'PC1',\r\n              titlefont: {color: 'rgb(148, 103, 189)'},\r\n              showgrid: $scope.layout.props.xScale,\r\n              tickfont: {color: 'rgb(148, 103, 189)'},\r\n              overlaying: 'x',\r\n              side: 'bottom',\r\n              range: [(maxValArrowX) * -1 * 1.1, maxValArrowX * 1.1],\r\n            },\r\n            yaxis: {\r\n              title: 'PC2',\r\n              showgrid: $scope.layout.props.yScale,\r\n              titlefont: {color: 'rgb(148, 103, 189)'},\r\n              tickfont: {color: 'rgb(148, 103, 189)'},\r\n              overlaying: 'y',\r\n              side: 'left',\r\n              range: [(maxValArrowY) * -1 * 1.1, maxValArrowY * 1.1],\r\n            },\r\n            xaxis2: {\r\n              titlefont: {color: 'rgb(148, 103, 189)'},\r\n              tickfont: {color: 'rgb(148, 103, 189)'},\r\n              overlaying: 'x',\r\n              side: 'top',\r\n              range: [(maxValMea1) * -1 * 1.1, maxValMea1 * 1.1],\r\n            },\r\n            yaxis2: {\r\n              titlefont: {color: 'rgb(148, 103, 189)'},\r\n              tickfont: {color: 'rgb(148, 103, 189)'},\r\n              overlaying: 'y',\r\n              side: 'right',\r\n              range: [(maxValMea2) * -1 * 1.1, maxValMea2 * 1.1],\r\n            },\r\n            margin: {\r\n              r: ($scope.layout.props.yAxisPosition == 'right') ? $scope.layout.props.marginRight + 70 : $scope.layout.props.marginRight,\r\n              l: ($scope.layout.props.yAxisPosition == 'left') ? $scope.layout.props.marginLeft + 70 : $scope.layout.props.marginLeft,\r\n              t: ($scope.layout.props.xAxisPosition == 'top') ? $scope.layout.props.marginTop + 70 : $scope.layout.props.marginTop,\r\n              b: ($scope.layout.props.xAxisPosition == 'bottom') ? $scope.layout.props.marginBottom + 70 : $scope.layout.props.marginBottom,\r\n            },\r\n            annotations: [\r\n            ],\r\n          }\r\n\r\n          for (let i = 0; i < $scope.rowsLabel.length; i++) {\r\n            customOptions.annotations.push(\r\n              {\r\n                x: arrowX[i],\r\n                y: arrowY[i],\r\n                xref: 'x',\r\n                yref: 'y',\r\n                ax: 0,\r\n                ay: 0,\r\n                axref: 'x',\r\n                ayref: 'y',\r\n                showarrow: true,\r\n                arrowcolor: `rgba(${palette[layout.props.colorForSub]},1)`,\r\n                arrowhead: 3,\r\n              },\r\n              {\r\n                x: arrowX[i],\r\n                y: arrowY[i],\r\n                text: $scope.rowsLabel[i],\r\n                font: {\r\n                  color: `rgba(${palette[layout.props.colorForSub]},1)`,\r\n                },\r\n                showarrow: false,\r\n              }\r\n            );\r\n          }\r\n\r\n\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:100%;\"></div>`);\r\n\r\n          const chart = bubbleChart.draw($scope, app, chartData, `aat-chart-${$scope.extId}`, customOptions);\r\n          bubbleChart.setEvents(chart, $scope, app);\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"
    ]
}