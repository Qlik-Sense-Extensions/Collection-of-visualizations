{
    "version": 3,
    "sources": [
        "analysis/t_test.js"
    ],
    "names": [
        "define",
        "utils",
        "$q",
        "createCube",
        "app",
        "$scope",
        "layout",
        "dimension",
        "validateDimension",
        "props",
        "dimensions",
        "qNullSuppression",
        "qDef",
        "qFieldDefs",
        "dataTitle",
        "params",
        "analysisTypeId",
        "measure1",
        "validateMeasure",
        "measures",
        "measure2",
        "displayDebugModeMessage",
        "debugMode",
        "saveRDataset",
        "getDebugSaveDatasetScript",
        "defMea1",
        "confidenceLevel",
        "displayRScriptsToConsole",
        "qLabel",
        "backendApi",
        "applyPatches",
        "qPath",
        "qOp",
        "qValue",
        "JSON",
        "stringify",
        "patchApplied",
        "drawChart",
        "defer",
        "requestPage",
        "qTop",
        "qLeft",
        "qWidth",
        "qHeight",
        "getData",
        "then",
        "dataPages",
        "qHyperCube",
        "qMeasureInfo",
        "qMatrix",
        "qText",
        "length",
        "displayConnectionError",
        "extId",
        "displayReturnedDatasetToConsole",
        "result",
        "parse",
        "t",
        "df",
        "pValue",
        "lower",
        "upper",
        "estimates",
        "html",
        "$",
        "resolve",
        "promise"
    ],
    "mappings": "AAAA,YAAAA,SACE,gBACA,SACC,SAACC,EAAOC,GACT,OASEC,WATK,SASMC,EAAKC,GACd,GAAMC,GAASD,EAAOC,OAMhBC,EAAYN,EAAMO,kBAAkBF,EAAOG,MAAMC,WAAW,IAC5DA,IACJC,kBAAkB,EAClBC,MACEC,YAAaN,KAIjBF,GAAOS,UAAY,EACnB,IAAIC,GAAS,GAEPC,EAAiBV,EAAOG,MAAMO,cAEpC,QAAQA,GACN,IAAK,GACHX,EAAOS,UAAY,qBACnBC,EAAS,cACT,MACF,KAAK,GACHV,EAAOS,UAAY,2BACnBC,EAAS,cACT,MACF,KAAK,GACHV,EAAOS,UAAY,iBACnBC,EAAS,YAMb,GAAME,GAAWhB,EAAMiB,gBAAgBZ,EAAOG,MAAMU,SAAS,IACvDC,EAAWnB,EAAMiB,gBAAgBZ,EAAOG,MAAMU,SAAS,GAG7DlB,GAAMoB,wBAAwBf,EAAOG,MAAMa,UAC3C,IAAMC,GAAetB,EAAMuB,0BAA0BlB,EAAOG,MAAMa,UAAW,oBAEvEG,EAAAA,2BAAqCF,EAArC,oEAAqHjB,EAAOG,MAAMiB,gBAAkBX,EAApJ,yJAAmTE,EAAnT,gBAA2UG,EAA3U,cAGNnB,GAAM0B,yBAAyBrB,EAAOG,MAAMa,WAAYG,GAExD,IAAMN,KAEFP,MACEgB,OAAQ,UACRhB,KAAMa,KAIRb,MACEgB,OAAQ,IACRhB,KAAM,MAIRA,MACEgB,OAAQ,IACRhB,KAAM,MAIRA,MACEgB,OAAQ,IACRhB,KAAM,MAIRA,MACEgB,OAAQ,IACRhB,KAAM,KAmBZ,OAdAP,GAAOwB,WAAWC,eAEdC,MAAO,6BACPC,IAAK,UACLC,OAAQC,KAAKC,UAAUzB,KAGvBqB,MAAO,2BACPC,IAAK,UACLC,OAAQC,KAAKC,UAAUhB,MAExB,GAEHd,EAAO+B,cAAe,EACf,MASTC,UAlHK,SAkHKhC,GACR,GAAMiC,GAAQpC,EAAGoC,QACXhC,EAASD,EAAOC,OAGhBiC,GADYtC,EAAMO,kBAAkBF,EAAOG,MAAMC,WAAW,MAEhE8B,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,QAAS,IAsDX,OAnDAtC,GAAOwB,WAAWe,QAAQL,GAAaM,KAAK,SAACC,GACvBzC,EAAOC,OAAOyC,WAAWC,YAG7C,IAAgD,IAA5CF,EAAU,GAAGG,QAAQ,GAAG,GAAGC,MAAMC,QAAoD,KAApCL,EAAU,GAAGG,QAAQ,GAAG,GAAGC,MAC9EjD,EAAMmD,uBAAuB/C,EAAOgD,WAC/B,CAELpD,EAAMqD,gCAAgChD,EAAOG,MAAMa,UAAWwB,EAAU,GAExE,IAAMS,GAASrB,KAAKsB,MAAMV,EAAU,GAAGG,QAAQ,GAAG,GAAGC,OAE/CO,EAAIF,EAAO,GAAG,GACdG,EAAKH,EAAO,GAAG,GACfI,EAASJ,EAAO,GAAG,GACnBK,EAAQL,EAAO,GAAG,GAClBM,EAAQN,EAAO,GAAG,GAClBO,EAAYP,EAAO,GAErBQ,EAAAA,qBACI1D,EAAOS,UADX,kPASsB2C,EATtB,kDAUuBC,EAVvB,uDAW4BC,EAX5B,uCAY2C,IAA/BrD,EAAOG,MAAMiB,gBAZzB,iCAY+EkC,EAZ/E,KAYyFC,EAZzF,yBAcE7C,EAAiBV,EAAOG,MAAMO,cAEb,KAAnBA,GAA2C,IAAnBA,EAC1B+C,GAAAA,+CAAuDD,EAAU,GAAjE,gBAAmFA,EAAU,GAA7F,aAC4B,IAAnB9C,IACT+C,GAAAA,6DAAqED,EAAU,GAA/E,cAKFC,GAAAA,8GAIAC,EAAAA,gCAAkC3D,EAAOgD,OAASU,KAAKA,GAEzD,MAAOzB,GAAM2B,YAER3B,EAAM4B",
    "file": "../../js/analysis/t_test.js",
    "sourcesContent": [
        "define([\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const dimensions = [{\r\n        qNullSuppression: true,\r\n        qDef: {\r\n          qFieldDefs: [dimension]\r\n        },\r\n      }];\r\n\r\n      $scope.dataTitle = '';\r\n      let params = '';\r\n\r\n      const analysisTypeId = layout.props.analysisTypeId;\r\n\r\n      switch (analysisTypeId) {\r\n        case 3:\r\n          $scope.dataTitle = 'Two sample t-test:';\r\n          params = ',var.equal=T';\r\n          break;\r\n        case 4:\r\n          $scope.dataTitle = 'Welch two sample t-test:';\r\n          params = ',var.equal=F';\r\n          break;\r\n        case 5:\r\n          $scope.dataTitle = 'Paired t-test:';\r\n          params = ',paired=T';\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      const measure1 = utils.validateMeasure(layout.props.measures[0]);\r\n      const measure2 = utils.validateMeasure(layout.props.measures[1]);\r\n\r\n      // Debug mode - set R dataset name to store the q data.\r\n      utils.displayDebugModeMessage(layout.props.debugMode);\r\n      const saveRDataset = utils.getDebugSaveDatasetScript(layout.props.debugMode, 'debug_t_test.rda');\r\n\r\n      const defMea1 = `R.ScriptEvalExStr('NN','${saveRDataset} library(jsonlite); res<-t.test(q$SampleA, q$SampleB, conf.level=${layout.props.confidenceLevel}${params}); json<-toJSON(list(as.double(res$statistic),as.double(res$parameter),res$p.value,res$conf.int[1],res$conf.int[2],as.double(res$estimate))); json;', ${measure1} as SampleA, ${measure2} as SampleB)`;\r\n\r\n      // Debug mode - display R Scripts to console\r\n      utils.displayRScriptsToConsole(layout.props.debugMode, [defMea1]);\r\n\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qLabel: 'Results',\r\n            qDef: defMea1,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n    /**\r\n    * drawChart - draw chart with updated data\r\n    *\r\n    * @param {Object} $scope angular $scope\r\n    *\r\n    * @return {Object} Promise object\r\n    */\r\n    drawChart($scope) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\r\n\r\n        // Display error when all measures' grand total return NaN.\r\n        if (dataPages[0].qMatrix[0][1].qText.length === 0 || dataPages[0].qMatrix[0][1].qText == '-') {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          // Debug mode - display returned dataset to console\r\n          utils.displayReturnedDatasetToConsole(layout.props.debugMode, dataPages[0]);\r\n\r\n          const result = JSON.parse(dataPages[0].qMatrix[0][1].qText);\r\n\r\n          const t = result[0][0];\r\n          const df = result[1][0];\r\n          const pValue = result[2][0];\r\n          const lower = result[3][0];\r\n          const upper = result[4][0];\r\n          const estimates = result[5];\r\n\r\n          let html = `\r\n            <h2>${$scope.dataTitle}</h2>\r\n            <table class=\"simple\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Item</th><th>Value</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr><td>t</td><td>${t}</td></tr>\r\n                <tr><td>df</td><td>${df}</td></tr>\r\n                <tr><td>p-value</td><td>${pValue}</td></tr>\r\n                <tr><td>${layout.props.confidenceLevel * 100}% confidence interval</td><td>${lower}, ${upper}</td></tr>\r\n          `;\r\n          const analysisTypeId = layout.props.analysisTypeId;\r\n\r\n          if (analysisTypeId === 3 || analysisTypeId === 4) {\r\n            html += `<tr><td>Sample estimates</td><td>mean of x: ${estimates[0]}, mean of y: ${estimates[1]}</td></tr>`;\r\n          } else if (analysisTypeId === 5) {\r\n            html += `<tr><td>Sample estimates</td><td>mean of the differences: ${estimates[0]}</td></tr>`;\r\n          } else {\r\n            // do nothing\r\n          }\r\n\r\n          html += `</tbody></table>\r\n          <div>* alternative hypothesis: true difference in means is not equal to 0</div>`;\r\n\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(html);\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"
    ]
}