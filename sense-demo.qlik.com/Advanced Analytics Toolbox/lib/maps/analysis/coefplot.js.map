{
    "version": 3,
    "sources": [
        "analysis/coefplot.js"
    ],
    "names": [
        "define",
        "lineChart",
        "utils",
        "$q",
        "createCube",
        "app",
        "$scope",
        "layout",
        "dimension",
        "validateDimension",
        "props",
        "dimensions",
        "qNullSuppression",
        "qDef",
        "qFieldDefs",
        "meaLen",
        "measures",
        "length",
        "rowsLabel",
        "validateMeasure",
        "params",
        "meaList",
        "dataType",
        "i",
        "mea",
        "param",
        "push",
        "displayDebugModeMessage",
        "debugMode",
        "saveRDataset",
        "getDebugSaveDatasetScript",
        "defMea1",
        "displayRScriptsToConsole",
        "qLabel",
        "backendApi",
        "applyPatches",
        "qPath",
        "qOp",
        "qValue",
        "JSON",
        "stringify",
        "patchApplied",
        "drawChart",
        "defer",
        "requestPage",
        "qTop",
        "qLeft",
        "qWidth",
        "qHeight",
        "getData",
        "then",
        "dataPages",
        "qHyperCube",
        "qMeasureInfo",
        "qMatrix",
        "qText",
        "displayConnectionError",
        "extId",
        "displayReturnedDatasetToConsole",
        "palette",
        "getDefaultPaletteColor",
        "result",
        "parse",
        "x",
        "array",
        "all",
        "$",
        "each",
        "key",
        "value",
        "Math",
        "abs",
        "maxVal",
        "max",
        "apply",
        "chartData",
        "y",
        "name",
        "error_x",
        "type",
        "symmetric",
        "arrayminus",
        "thickness",
        "borderWidth",
        "color",
        "colors",
        "colorForMain",
        "mode",
        "marker",
        "size",
        "pointRadius",
        "customOptions",
        "showlegend",
        "showLegend",
        "xaxis",
        "showgrid",
        "xScale",
        "side",
        "xAxisPosition",
        "range",
        "yaxis",
        "yScale",
        "yAxisPosition",
        "autorange",
        "separators",
        "getSeparators",
        "dragmode",
        "margin",
        "r",
        "marginRight",
        "l",
        "marginLeft",
        "t",
        "marginTop",
        "b",
        "marginBottom",
        "html",
        "draw",
        "resolve",
        "promise"
    ],
    "mappings": "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",
    "file": "../../js/analysis/coefplot.js",
    "sourcesContent": [
        "define([\r\n  '../chart/line_chart',\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (lineChart, utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const dimensions = [{\r\n        qNullSuppression: true,\r\n        qDef: {\r\n          qFieldDefs: [dimension]\r\n        },\r\n      }];\r\n\r\n      const meaLen = layout.props.measures.length;\r\n      $scope.rowsLabel = ['(Intercept)', utils.validateMeasure(layout.props.measures[1])]; // Label for dimension values\r\n      let params = `${utils.validateMeasure(layout.props.measures[0])} as mea0, ${utils.validateMeasure(layout.props.measures[1])} as mea1`;\r\n      let meaList = 'q$mea0 ~ q$mea1';\r\n      let dataType = 'NN';\r\n\r\n      for (let i = 2; i < meaLen; i++) {\r\n        const mea = utils.validateMeasure(layout.props.measures[i]);\r\n        if (mea.length > 0) {\r\n          const param = `,${mea} as mea${i}`;\r\n          params += param;\r\n          meaList += ` + q$mea${i}`;\r\n          dataType += 'N';\r\n\r\n          $scope.rowsLabel.push(utils.validateMeasure(layout.props.measures[i]));\r\n        }\r\n      }\r\n\r\n      // Debug mode - set R dataset name to store the q data.\r\n      utils.displayDebugModeMessage(layout.props.debugMode);\r\n      const saveRDataset = utils.getDebugSaveDatasetScript(layout.props.debugMode, 'debug_coefplot.rda');\r\n\r\n      const defMea1 = `R.ScriptEvalExStr('${dataType}','${saveRDataset} library(jsonlite);lm_result <- lm(${meaList});res<-toJSON(coef(summary(lm_result)));res;',${params})`;\r\n\r\n      // Debug mode - display R Scripts to console\r\n      utils.displayRScriptsToConsole(layout.props.debugMode, [defMea1]);\r\n\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: defMea1,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n    /**\r\n    * drawChart - draw chart with updated data\r\n    *\r\n    * @param {Object} $scope angular $scope\r\n    *\r\n    * @return {Object} Promise object\r\n    */\r\n    drawChart($scope) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\r\n\r\n        // Display error when all measures' grand total return NaN.\r\n        if (dataPages[0].qMatrix[0][1].qText.length === 0 || dataPages[0].qMatrix[0][1].qText == '-') {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          // Debug mode - display returned dataset to console\r\n          utils.displayReturnedDatasetToConsole(layout.props.debugMode, dataPages[0]);\r\n\r\n          const palette = utils.getDefaultPaletteColor();\r\n          const result = JSON.parse(dataPages[0].qMatrix[0][1].qText);\r\n\r\n          const x = [];\r\n          const array = [];\r\n          const all = [];\r\n          $.each(result, (key, value) => {\r\n            x.push(value[0]);\r\n            array.push(value[1]);\r\n            all.push(Math.abs(value[0] + value[1]));\r\n            all.push(Math.abs(value[0] - value[1]));\r\n          });\r\n\r\n          const maxVal = Math.max.apply(null, all);\r\n\r\n          const chartData = [\r\n            {\r\n              x: x,\r\n              y: $scope.rowsLabel,\r\n              name: 'Coefficients plot',\r\n              error_x: {\r\n                type: 'data',\r\n                symmetric: false,\r\n                array: array,\r\n                arrayminus: array,\r\n                thickness: layout.props.borderWidth,\r\n                color: (layout.props.colors) ? `rgba(${palette[3]},1)` : `rgba(${palette[layout.props.colorForMain]},1)`,\r\n              },\r\n              type: 'scatter',\r\n              mode: 'markers',\r\n              marker: {\r\n                color: (layout.props.colors) ? `rgba(${palette[3]},1)` : `rgba(${palette[layout.props.colorForMain]},1)`,\r\n                size: layout.props.pointRadius,\r\n              },\r\n            }\r\n          ];\r\n\r\n          const customOptions = {\r\n            showlegend: $scope.layout.props.showLegend,\r\n            xaxis: {\r\n              showgrid: $scope.layout.props.xScale,\r\n              side: $scope.layout.props.xAxisPosition,\r\n              range: [(maxVal * 1.1) * -1, (maxVal * 1.1)],\r\n            },\r\n            yaxis: {\r\n              showgrid: $scope.layout.props.yScale,\r\n              side: $scope.layout.props.yAxisPosition,\r\n              autorange: 'reversed',\r\n              range: [-1, ($scope.rowsLabel.length)],\r\n            },\r\n            separators: utils.getSeparators($scope, 0),\r\n            dragmode: 'select',\r\n            margin: {\r\n              r: ($scope.layout.props.yAxisPosition == 'right') ? $scope.layout.props.marginRight + 70 : $scope.layout.props.marginRight,\r\n              l: ($scope.layout.props.yAxisPosition == 'left') ? $scope.layout.props.marginLeft + 70 : $scope.layout.props.marginLeft,\r\n              t: ($scope.layout.props.xAxisPosition == 'top') ? $scope.layout.props.marginTop + 70 : $scope.layout.props.marginTop,\r\n              b: ($scope.layout.props.xAxisPosition == 'bottom') ? $scope.layout.props.marginBottom + 70 : $scope.layout.props.marginBottom,\r\n            },\r\n          };\r\n\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:100%;\"></div>`);\r\n\r\n          lineChart.draw($scope, chartData, `aat-chart-${$scope.extId}`, customOptions);\r\n\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"
    ]
}