{
    "version": 3,
    "sources": [
        "analysis/textmining_wordcloud.js"
    ],
    "names": [
        "define",
        "wordCloud",
        "utils",
        "$q",
        "createCube",
        "app",
        "$scope",
        "layout",
        "dimension0",
        "validateDimension",
        "props",
        "dimensions",
        "qDef",
        "qFieldDefs",
        "dimension1",
        "displayDebugModeMessage",
        "debugMode",
        "saveRDataset",
        "getDebugSaveDatasetScript",
        "defMea1",
        "tolower",
        "removeNumbers",
        "stopwords",
        "removePunctuation",
        "stemming",
        "numOfFrequentTerms",
        "displayRScriptsToConsole",
        "measures",
        "qLabel",
        "backendApi",
        "applyPatches",
        "qPath",
        "qOp",
        "qValue",
        "JSON",
        "stringify",
        "patchApplied",
        "drawChart",
        "defer",
        "requestPage",
        "qTop",
        "qLeft",
        "qWidth",
        "qHeight",
        "getData",
        "then",
        "dataPages",
        "qMatrix",
        "qText",
        "length",
        "displayConnectionError",
        "extId",
        "displayReturnedDatasetToConsole",
        "text",
        "getDefaultPaletteColor",
        "parse",
        "weight",
        "dataset",
        "_loop",
        "i",
        "push",
        "handlers",
        "click",
        "selectAssociations",
        "qSearchFields",
        "$",
        "html",
        "draw",
        "resolve",
        "promise"
    ],
    "mappings": "AAAA,YAAAA,SACE,qBACA,gBACA,SACC,SAACC,EAAWC,EAAOC,GACpB,OASEC,WATK,SASMC,EAAKC,GACd,GAAMC,GAASD,EAAOC,OAKhBC,EAAaN,EAAMO,kBAAkBF,EAAOG,MAAMC,WAAW,IAE7DA,IAEFC,MACEC,YAAaL,MAIbM,EAAaZ,EAAMO,kBAAkBF,EAAOG,MAAMC,WAAW,GAGnET,GAAMa,wBAAwBR,EAAOG,MAAMM,UAC3C,IAAMC,GAAef,EAAMgB,0BAA0BX,EAAOG,MAAMM,UAAW,kCAEvEG,EAAAA,2CACKF,EADL,mYAUiBV,EAAOG,MAAMU,QAV9B,uCAWuBb,EAAOG,MAAMW,cAXpC,mCAYmBd,EAAOG,MAAMY,UAZhC,2CAa2Bf,EAAOG,MAAMa,kBAbxC,kCAckBhB,EAAOG,MAAMc,SAd/B,2JAkB6BjB,EAAOG,MAAMe,mBAlB1C,eAkB2ElB,EAAOG,MAAMe,mBAlBxF,yFAqBMX,EArBN,WAwBNZ,GAAMwB,yBAAyBnB,EAAOG,MAAMM,WAAYG,GAExD,IAAMQ,KAEFf,MACEgB,OAAQ,SACRhB,KAAMO,KAIRP,MACEgB,OAAQ,IACRhB,KAAM,MAIRA,MACEgB,OAAQ,IACRhB,KAAM,MAIRA,MACEgB,OAAQ,IACRhB,KAAM,MAIRA,MACEgB,OAAQ,IACRhB,KAAM,KAmBZ,OAdAN,GAAOuB,WAAWC,eAEdC,MAAO,6BACPC,IAAK,UACLC,OAAQC,KAAKC,UAAUxB,KAGvBoB,MAAO,2BACPC,IAAK,UACLC,OAAQC,KAAKC,UAAUR,MAExB,GAEHrB,EAAO8B,cAAe,EACf,MAUTC,UAjHK,SAiHK/B,EAAQD,GAChB,GAAMiC,GAAQnC,EAAGmC,QACX/B,EAASD,EAAOC,OAGhBgC,IACJC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,QAAS,GAsCX,OAnCArC,GAAOuB,WAAWe,QAAQL,GAAaM,KAAK,SAACC,GAiC3C,MA/BgD,KAA5CA,EAAU,GAAGC,QAAQ,GAAG,GAAGC,MAAMC,QAAoD,KAApCH,EAAU,GAAGC,QAAQ,GAAG,GAAGC,MAC9E9C,EAAMgD,uBAAuB5C,EAAO6C,QAC/B,WAELjD,EAAMkD,gCAAgC7C,EAAOG,MAAMM,UAAW8B,EAAU,GAQxE,KAAK,GAJCO,IAFUnD,EAAMoD,yBAETpB,KAAKqB,MAAMT,EAAU,GAAGC,QAAQ,GAAG,GAAGC,OAAO,IACpDQ,EAAStB,KAAKqB,MAAMT,EAAU,GAAGC,QAAQ,GAAG,GAAGC,OAAO,GAEtDS,KATDC,EAAA,SAUIC,GACPF,EAAQG,MAEJP,KAAMA,EAAKM,GACXH,OAAQA,EAAOG,GACfE,UACEC,MAAO,WACLzD,EAAI0D,mBAAmB,GAAIV,EAAKM,KAAOK,eAAiB9D,EAAMO,kBAAkBF,EAAOG,MAAMC,WAAW,YAPzGgD,EAAI,EAAGA,EAAIN,EAAKJ,OAAQU,IAAKD,EAA7BC,EAeTM,GAAAA,gCAAkC3D,EAAO6C,OAASe,KAAlD,8DAEAjE,EAAUkE,KAAKV,MAEVnB,EAAM8B,YAER9B,EAAM+B",
    "file": "../../js/analysis/textmining_wordcloud.js",
    "sourcesContent": [
        "define([\r\n  '../chart/wordcloud',\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (wordCloud, utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      const dimension0 = utils.validateDimension(layout.props.dimensions[0]);\r\n\r\n      const dimensions = [\r\n        {\r\n          qDef: {\r\n            qFieldDefs: [dimension0],\r\n          },\r\n        },\r\n      ];\r\n      const dimension1 = utils.validateDimension(layout.props.dimensions[1]);\r\n\r\n      // Debug mode - set R dataset name to store the q data.\r\n      utils.displayDebugModeMessage(layout.props.debugMode);\r\n      const saveRDataset = utils.getDebugSaveDatasetScript(layout.props.debugMode, 'debug_textmining_wordcloud.rda');\r\n\r\n      const defMea1 = `R.ScriptEvalExStr('S','\r\n               ${saveRDataset}\r\n               library(tm);\r\n               library(jsonlite);\r\n               library(SnowballC);\r\n               counter <- 1:length(q$text);\r\n               res <- c();\r\n               for(i in counter) res <- paste(res, q$text[i]);\r\n               corpus<-VCorpus(VectorSource(res));\r\n               tdm <- TermDocumentMatrix(corpus, control = list(\r\n                 tolower = ${layout.props.tolower},\r\n                 removeNumbers = ${layout.props.removeNumbers},\r\n                 stopwords = ${layout.props.stopwords},\r\n                 removePunctuation = ${layout.props.removePunctuation},\r\n                 stemming = ${layout.props.stemming}\r\n               ));\r\n               m <-as.matrix(tdm)\r\n               sorted<-m[order(m[,1], decreasing=T),];\r\n               x<-list(names(sorted)[1:${layout.props.numOfFrequentTerms}], sorted[1:${layout.props.numOfFrequentTerms}]);\r\n               json<-toJSON(x, pretty=T);\r\n               json;\r\n             ', ${dimension1} AS text)`;\r\n\r\n      // Debug mode - display R Scripts to console\r\n      utils.displayRScriptsToConsole(layout.props.debugMode, [defMea1]);\r\n\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qLabel: 'Result',\r\n            qDef: defMea1,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * drawChart - draw chart with updated data\r\n     *\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Object} Promise object\r\n     */\r\n    drawChart($scope, app) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      // const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        // Display error when all measures' grand total return NaN.\r\n        if (dataPages[0].qMatrix[0][1].qText.length === 0 || dataPages[0].qMatrix[0][1].qText == '-') {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          // Debug mode - display returned dataset to console\r\n          utils.displayReturnedDatasetToConsole(layout.props.debugMode, dataPages[0]);\r\n\r\n          const palette = utils.getDefaultPaletteColor();\r\n\r\n          const text = JSON.parse(dataPages[0].qMatrix[0][1].qText)[0];\r\n          const weight = JSON.parse(dataPages[0].qMatrix[0][1].qText)[1];\r\n\r\n          const dataset = [];\r\n          for (let i = 0; i < text.length; i++) {\r\n            dataset.push(\r\n              {\r\n                text: text[i],\r\n                weight: weight[i],\r\n                handlers: {\r\n                  click: function() {\r\n                    app.selectAssociations(0, [text[i]], { qSearchFields:  [utils.validateDimension(layout.props.dimensions[1])] })\r\n                  },\r\n                },\r\n              },\r\n            );\r\n          }\r\n\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div style=\"width:100%; height:100%\" id=\"aat-chart\"></div>`);\r\n\r\n          wordCloud.draw(dataset);\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"
    ]
}