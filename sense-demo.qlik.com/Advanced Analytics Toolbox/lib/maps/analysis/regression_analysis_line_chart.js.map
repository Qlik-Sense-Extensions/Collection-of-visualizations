{
    "version": 3,
    "sources": [
        "analysis/regression_analysis_line_chart.js"
    ],
    "names": [
        "define",
        "lineChart",
        "utils",
        "$q",
        "createCube",
        "app",
        "$scope",
        "layout",
        "dimension",
        "validateDimension",
        "props",
        "dimensions",
        "qNullSuppression",
        "qDef",
        "qFieldDefs",
        "qSortCriterias",
        "qSortByExpression",
        "dimSort",
        "dimSortByExpression",
        "dimSortByExpressionAsc",
        "qSortByNumeric",
        "dimSortByNum",
        "dimSortByNumAsc",
        "qSortByAscii",
        "dimSortByAlph",
        "dimSortByAlphAsc",
        "qExpression",
        "qv",
        "dimSortByExpressionString",
        "meaLen",
        "measures",
        "length",
        "rowsLabel",
        "validateMeasure",
        "params",
        "meaList",
        "i",
        "mea",
        "param",
        "push",
        "displayDebugModeMessage",
        "debugMode",
        "saveRDataset",
        "getDebugSaveDatasetScript",
        "defMea1",
        "interval",
        "confidenceLevel",
        "defMea2",
        "defMea3",
        "displayRScriptsToConsole",
        "measure",
        "qLabel",
        "backendApi",
        "applyPatches",
        "qPath",
        "qOp",
        "qValue",
        "JSON",
        "stringify",
        "patchApplied",
        "drawChart",
        "defer",
        "requestPage",
        "qTop",
        "qLeft",
        "qWidth",
        "qHeight",
        "getData",
        "then",
        "dataPages",
        "measureInfo",
        "qHyperCube",
        "qMeasureInfo",
        "isNaN",
        "qMin",
        "qMax",
        "displayConnectionError",
        "extId",
        "displayReturnedDatasetToConsole",
        "palette",
        "getDefaultPaletteColor",
        "elemNum",
        "dim1",
        "mea1",
        "mea2",
        "mea3",
        "mea4",
        "$",
        "each",
        "qMatrix",
        "key",
        "value",
        "qElemNumber",
        "qText",
        "qNum",
        "chartData",
        "x",
        "y",
        "name",
        "mode",
        "fill",
        "line",
        "fillcolor",
        "colors",
        "colorForMain",
        "marker",
        "color",
        "size",
        "datapoints",
        "pointRadius",
        "width",
        "borderWidth",
        "colorForSub",
        "type",
        "html",
        "chart",
        "draw",
        "setEvents",
        "resolve",
        "promise"
    ],
    "mappings": "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",
    "file": "../../js/analysis/regression_analysis_line_chart.js",
    "sourcesContent": [
        "define([\r\n  '../chart/line_chart',\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (lineChart, utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n\r\n      const dimensions = [\r\n        {\r\n          qNullSuppression: true,\r\n          qDef: {\r\n            qFieldDefs: [dimension],\r\n            qSortCriterias: [{\r\n              qSortByExpression: layout.props.dimSort || !layout.props.dimSortByExpression ? 0 : layout.props.dimSortByExpressionAsc,\r\n              qSortByNumeric: (layout.props.dimSort) ? 1 : (!layout.props.dimSortByNum) ? 0 : layout.props.dimSortByNumAsc,\r\n              qSortByAscii: layout.props.dimSort || !layout.props.dimSortByAlph ? 0 : layout.props.dimSortByAlphAsc,\r\n              qExpression: {\r\n                qv: layout.props.dimSortByExpressionString,\r\n              },\r\n            }],\r\n          },\r\n        },\r\n      ];\r\n\r\n      const meaLen = layout.props.measures.length;\r\n      $scope.rowsLabel = ['(Intercept)', utils.validateMeasure(layout.props.measures[1])]; // Label for dimension values\r\n      let params = `${utils.validateMeasure(layout.props.measures[0])} as mea0, ${utils.validateMeasure(layout.props.measures[1])} as mea1`;\r\n      let meaList = 'q$mea0 ~ q$mea1';\r\n\r\n      for (let i = 2; i < meaLen; i++) {\r\n        const mea = utils.validateMeasure(layout.props.measures[i]);\r\n        if (mea.length > 0) {\r\n          const param = `,${mea} as mea${i}`;\r\n          params += param;\r\n          meaList += ` + q$mea${i}`;\r\n\r\n          $scope.rowsLabel.push(utils.validateMeasure(layout.props.measures[i]));\r\n        }\r\n      }\r\n\r\n      // Debug mode - set R dataset name to store the q data.\r\n      utils.displayDebugModeMessage(layout.props.debugMode);\r\n      const saveRDataset = utils.getDebugSaveDatasetScript(layout.props.debugMode, 'debug_regression_analysis_line_chart.rda');\r\n\r\n      const defMea1 = `R.ScriptEval('${saveRDataset} lm_result <- lm(${meaList});predict(lm_result, interval=\"${layout.props.interval}\", level=${layout.props.confidenceLevel})[,1]',${params})`;\r\n      const defMea2 = `R.ScriptEval('lm_result <- lm(${meaList});predict(lm_result, interval=\"${layout.props.interval}\", level=${layout.props.confidenceLevel})[,2]',${params})`;\r\n      const defMea3 = `R.ScriptEval('lm_result <- lm(${meaList});predict(lm_result, interval=\"${layout.props.interval}\", level=${layout.props.confidenceLevel})[,3]',${params})`\r\n\r\n      // Debug mode - display R Scripts to console\r\n      utils.displayRScriptsToConsole(layout.props.debugMode, [defMea1, defMea2, defMea3]);\r\n\r\n      const measure = utils.validateMeasure(layout.props.measures[0]);\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: measure,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qDef: defMea1,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qDef: defMea2,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qDef: defMea3,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n    /**\r\n    * drawChart - draw chart with updated data\r\n    *\r\n    * @param {Object} $scope angular $scope\r\n    *\r\n    * @return {Object} Promise object\r\n    */\r\n    drawChart($scope, app) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1500,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\r\n\r\n        // Display error when all measures' grand total return NaN.\r\n        if (isNaN(measureInfo[1].qMin) && isNaN(measureInfo[1].qMax)\r\n          && isNaN(measureInfo[2].qMin) && isNaN(measureInfo[2].qMax)\r\n          && isNaN(measureInfo[3].qMin) && isNaN(measureInfo[3].qMax)\r\n        ) {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          // Debug mode - display returned dataset to console\r\n          utils.displayReturnedDatasetToConsole(layout.props.debugMode, dataPages[0]);\r\n\r\n          const palette = utils.getDefaultPaletteColor();\r\n\r\n          const elemNum = [];\r\n          const dim1 = []; // Dimension\r\n          const mea1 = [];\r\n          const mea2 = [];\r\n          const mea3 = [];\r\n          const mea4 = [];\r\n\r\n          $.each(dataPages[0].qMatrix, (key, value) => {\r\n            elemNum.push(value[0].qElemNumber);\r\n            dim1.push(value[0].qText);\r\n            mea1.push(value[1].qNum);\r\n            mea2.push(value[2].qNum);\r\n            mea3.push(value[3].qNum);\r\n            mea4.push(value[4].qNum);\r\n          });\r\n\r\n          const chartData = [\r\n            {\r\n              x: dim1,\r\n              y: mea1,\r\n              elemNum,\r\n              name: 'Observed',\r\n              mode: 'lines+markers',\r\n              fill:  layout.props.line,\r\n              fillcolor: (layout.props.colors) ? `rgba(${palette[3]},0.3)` : `rgba(${palette[layout.props.colorForMain]},0.3)`,\r\n              marker: {\r\n                color: (layout.props.colors) ? `rgba(${palette[3]},1)` : `rgba(${palette[layout.props.colorForMain]},1)`,\r\n                size: (layout.props.datapoints) ? layout.props.pointRadius : 1,\r\n              },\r\n              line: {\r\n                width: layout.props.borderWidth,\r\n              },\r\n            },\r\n            {\r\n              x: dim1,\r\n              y: mea2,\r\n              name: 'Fit',\r\n              line: {\r\n                color: `rgba(${palette[layout.props.colorForSub]},1)`,\r\n              },\r\n            },\r\n            {\r\n              x: dim1,\r\n              y: mea3,\r\n              name: 'Lower',\r\n              fill: 'tonexty',\r\n              fillcolor: `rgba(${palette[layout.props.colorForSub]},0.3)`,\r\n              type: 'scatter',\r\n              mode: 'none',\r\n            },\r\n            {\r\n              x: dim1,\r\n              y: mea4,\r\n              name: 'Upper',\r\n              fill: 'tonexty',\r\n              fillcolor: `rgba(${palette[layout.props.colorForSub]},0.3)`,\r\n              type: 'scatter',\r\n              mode: 'none',\r\n            },\r\n          ];\r\n\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:100%;\"></div>`);\r\n\r\n          const chart = lineChart.draw($scope, chartData, `aat-chart-${$scope.extId}`, null);\r\n          lineChart.setEvents(chart, $scope, app);\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"
    ]
}