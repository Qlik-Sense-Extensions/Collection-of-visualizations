{
    "version": 3,
    "sources": [
        "analysis/pca.js"
    ],
    "names": [
        "define",
        "utils",
        "$q",
        "createCube",
        "app",
        "$scope",
        "layout",
        "dimension",
        "validateDimension",
        "props",
        "dimensions",
        "qNullSuppression",
        "qDef",
        "qFieldDefs",
        "meaLen",
        "measures",
        "length",
        "rowsLabel",
        "validateMeasure",
        "params",
        "meaList",
        "dataType",
        "i",
        "mea",
        "param",
        "push",
        "displayDebugModeMessage",
        "debugMode",
        "saveRDataset",
        "getDebugSaveDatasetScript",
        "defMea1",
        "displayRScriptsToConsole",
        "qLabel",
        "backendApi",
        "applyPatches",
        "qPath",
        "qOp",
        "qValue",
        "JSON",
        "stringify",
        "patchApplied",
        "drawChart",
        "defer",
        "requestPage",
        "qTop",
        "qLeft",
        "qWidth",
        "qHeight",
        "getData",
        "then",
        "dataPages",
        "qHyperCube",
        "qMeasureInfo",
        "qMatrix",
        "qText",
        "displayConnectionError",
        "extId",
        "displayReturnedDatasetToConsole",
        "result",
        "parse",
        "importance",
        "rotation",
        "header",
        "importanceBody",
        "$",
        "each",
        "key",
        "value",
        "subKey",
        "subValue",
        "rotationBody",
        "footer",
        "importanceHTML",
        "rotationHTML",
        "html",
        "resolve",
        "promise"
    ],
    "mappings": "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",
    "file": "../../js/analysis/pca.js",
    "sourcesContent": [
        "define([\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const dimensions = [{\r\n        qNullSuppression: true,\r\n        qDef: {\r\n          qFieldDefs: [dimension]\r\n        },\r\n      }];\r\n\r\n      const meaLen = layout.props.measures.length;\r\n      $scope.rowsLabel = [utils.validateMeasure(layout.props.measures[0])]; // Label for dimension values\r\n      let params = `${utils.validateMeasure(layout.props.measures[0])} as mea0`;\r\n      let meaList = 'q$mea0';\r\n      let dataType = 'N';\r\n\r\n      for (let i = 1; i < meaLen; i++) {\r\n        const mea = utils.validateMeasure(layout.props.measures[i]);\r\n        if (mea.length > 0) {\r\n          const param = `,${mea} as mea${i}`;\r\n          params += param;\r\n          meaList += `,q$mea${i}`;\r\n          dataType += 'N';\r\n\r\n          $scope.rowsLabel.push(utils.validateMeasure(layout.props.measures[i]));\r\n        }\r\n      }\r\n\r\n      // Debug mode - set R dataset name to store the q data.\r\n      utils.displayDebugModeMessage(layout.props.debugMode);\r\n      const saveRDataset = utils.getDebugSaveDatasetScript(layout.props.debugMode, 'debug_pca.rda');\r\n\r\n      const defMea1 = `R.ScriptEvalExStr('${dataType}','${saveRDataset} library(jsonlite); pca_result<-prcomp(data.frame(${meaList}), center = TRUE, scale = TRUE); json<-toJSON(list(summary(pca_result)$importance, summary(pca_result)$rotation)); json;',${params})`;\r\n\r\n      // Debug mode - display R Scripts to console\r\n      utils.displayRScriptsToConsole(layout.props.debugMode, [defMea1]);\r\n\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: defMea1,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n    /**\r\n    * drawChart - draw chart with updated data\r\n    *\r\n    * @param {Object} $scope angular $scope\r\n    *\r\n    * @return {Object} Promise object\r\n    */\r\n    drawChart($scope) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\r\n\r\n        // Display error when all measures' grand total return NaN.\r\n        if (dataPages[0].qMatrix[0][1].qText.length === 0 || dataPages[0].qMatrix[0][1].qText == '-') {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          // Debug mode - display returned dataset to console\r\n          utils.displayReturnedDatasetToConsole(layout.props.debugMode, dataPages[0]);\r\n\r\n          const result = JSON.parse(dataPages[0].qMatrix[0][1].qText);\r\n          const importance = result[0];\r\n          const rotation = result[1];\r\n\r\n          // Table header\r\n          let header = '<table class=\"simple\"><thead><tr><th></th>';\r\n          for(let i = 0; i < importance[0].length; i++) {\r\n            header += `<th>PC${i + 1}</th>`;\r\n          }\r\n          header += '</tr></thead><tbody>';\r\n\r\n          // Table body for importance\r\n          let importanceBody = '';\r\n          $.each(importance, (key, value) => {\r\n            importanceBody += '<tr><td>'\r\n            importanceBody += (key == 0) ? 'Standard deviation' : (key == 1) ? 'Proportion of Variance' : (key == 2) ? 'Cumulative Proportion' : '';\r\n            importanceBody += '</td>';\r\n            $.each(value, (subKey, subValue) => {\r\n              importanceBody += `<td>${subValue}</td>`;\r\n            });\r\n            importanceBody += '</tr>';\r\n          });\r\n\r\n          // Table body for rotation\r\n          let rotationBody = '';\r\n          $.each(rotation, (key, value) => {\r\n            rotationBody += `<tr><td>${$scope.rowsLabel[key]}`;\r\n            $.each(value, (subKey, subValue) => {\r\n              rotationBody += `<td>${subValue}</td>`;\r\n            });\r\n            rotationBody += '</tr>';\r\n          });\r\n\r\n          // Set table footer and other results\r\n          const footer = '</tbody></table>';\r\n\r\n          const importanceHTML = '<h2>Importance of components:</h2>' + header + importanceBody + footer;\r\n          const rotationHTML = '<h2>Rotation:</h2>' + header + rotationBody + footer;\r\n          const html = importanceHTML + rotationHTML;\r\n\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(html);\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"
    ]
}