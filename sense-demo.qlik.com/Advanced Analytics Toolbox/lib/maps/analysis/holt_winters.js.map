{
    "version": 3,
    "sources": [
        "analysis/holt_winters.js"
    ],
    "names": [
        "define",
        "lineChart",
        "datatables",
        "utils",
        "$q",
        "d3",
        "createCube",
        "app",
        "$scope",
        "layout",
        "dimension",
        "validateDimension",
        "props",
        "dimensions",
        "qNullSuppression",
        "qDef",
        "qFieldDefs",
        "measure",
        "validateMeasure",
        "measures",
        "frequency",
        "holtWintersParams",
        "autoHoltWinters",
        "holtWintersAlpha",
        "holtWintersBeta",
        "holtWintersGamma",
        "displayDebugModeMessage",
        "debugMode",
        "saveRDataset",
        "getDebugSaveDatasetScript",
        "defMea1",
        "seasonal",
        "confidenceLevel",
        "forecastingPeriods",
        "displayRScriptsToConsole",
        "qLabel",
        "backendApi",
        "applyPatches",
        "qPath",
        "qOp",
        "qValue",
        "JSON",
        "stringify",
        "patchApplied",
        "drawChart",
        "defer",
        "requestPage",
        "qTop",
        "qLeft",
        "qWidth",
        "qHeight",
        "getData",
        "then",
        "dataPages",
        "qMatrix",
        "qText",
        "length",
        "displayConnectionError",
        "extId",
        "displayReturnedDatasetToConsole",
        "palette",
        "getDefaultPaletteColor",
        "result",
        "parse",
        "mean",
        "upper",
        "lower",
        "params",
        "alpha",
        "beta",
        "gamma",
        "displayTable",
        "datasets",
        "dataLength",
        "elemNum",
        "dim1",
        "mea1",
        "$",
        "each",
        "key",
        "value",
        "push",
        "qElemNumber",
        "qNum",
        "mea2",
        "Array",
        "mea3",
        "mea4",
        "i",
        "chartData",
        "x",
        "y",
        "name",
        "mode",
        "fill",
        "line",
        "fillcolor",
        "colors",
        "colorForMain",
        "marker",
        "color",
        "size",
        "datapoints",
        "pointRadius",
        "width",
        "borderWidth",
        "colorForSub",
        "type",
        "customOptions",
        "xaxis",
        "title",
        "xLabelsAndTitle",
        "label",
        "showgrid",
        "xScale",
        "side",
        "xAxisPosition",
        "displayHoltWintersParams",
        "html",
        "chart",
        "draw",
        "setEvents",
        "locale",
        "getLocale",
        "numberFormat",
        "getNumberFormat",
        "dataset",
        "format",
        "replace",
        "table",
        "resolve",
        "promise"
    ],
    "mappings": "AAAA,YAAAA,SACE,sBACA,sBACA,gBACA,QACA,8BACC,SAACC,EAAWC,EAAYC,EAAOC,EAAIC,GACpC,OASEC,WATK,SASMC,EAAKC,GACd,GAAMC,GAASD,EAAOC,OAKhBC,EAAYP,EAAMQ,kBAAkBF,EAAOG,MAAMC,WAAW,IAG5DA,IACJC,kBAAkB,EAClBC,MACEC,YAAaN,MAGXO,EAAUd,EAAMe,gBAAgBT,EAAOG,MAAMO,SAAS,IAExDC,EAAY,EACZX,GAAOG,MAAMQ,UAAY,IAC3BA,EAAAA,cAA0BX,EAAOG,MAAMQ,UAGzC,IAAIC,GAAoB,EACnBZ,GAAOG,MAAMU,kBAChBD,EAAAA,UAA8BZ,EAAOG,MAAMW,iBAA3C,SAAoEd,EAAOG,MAAMY,gBAAjF,UAA0Gf,EAAOG,MAAMa,kBAIzHtB,EAAMuB,wBAAwBjB,EAAOG,MAAMe,UAC3C,IAAMC,GAAezB,EAAM0B,0BAA0BpB,EAAOG,MAAMe,UAAW,iCAEvEG,EAAAA,2BAAqCF,EAArC,mFAAoIR,EAApI,8CAC6BX,EAAOG,MAAMmB,SAD1C,KACuDV,EADvD,sCAEqBZ,EAAOG,MAAMoB,gBAFlC,OAEwDvB,EAAOG,MAAMqB,mBAFrE,+JAG8IhB,EAH9I,cAMNd,GAAM+B,yBAAyBzB,EAAOG,MAAMe,WAAYG,GAExD,IAAMX,KAEFJ,MACEA,KAAME,KAIRF,MACEA,KAAMe,KAIRf,MACEoB,OAAQ,IACRpB,KAAM,MAIRA,MACEoB,OAAQ,IACRpB,KAAM,MAIRA,MACEoB,OAAQ,IACRpB,KAAM,KAmBZ,OAdAP,GAAO4B,WAAWC,eAEdC,MAAO,6BACPC,IAAK,UACLC,OAAQC,KAAKC,UAAU7B,KAGvByB,MAAO,2BACPC,IAAK,UACLC,OAAQC,KAAKC,UAAUvB,MAExB,GAEHX,EAAOmC,cAAe,EACf,MAUTC,UAvGK,SAuGKpC,EAAQD,GAChB,GAAMsC,GAAQzC,EAAGyC,QACXpC,EAASD,EAAOC,OAGhBqC,IACJC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,QAAS,MA6LX,OA1LA1C,GAAO4B,WAAWe,QAAQL,GAAaM,KAAK,SAACC,GAC3C,GAAgD,IAA5CA,EAAU,GAAGC,QAAQ,GAAG,GAAGC,MAAMC,QAAoD,KAApCH,EAAU,GAAGC,QAAQ,GAAG,GAAGC,MAC9EpD,EAAMsD,uBAAuBjD,EAAOkD,WAC/B,CAELvD,EAAMwD,gCAAgClD,EAAOG,MAAMe,UAAW0B,EAAU,GAExE,IAAMO,GAAUzD,EAAM0D,yBAEhBC,EAASrB,KAAKsB,MAAMV,EAAU,GAAGC,QAAQ,GAAG,GAAGC,OAC/CS,EAAOF,EAAO,GACdG,EAAQH,EAAO,GACfI,EAAQJ,EAAO,GACfK,EAASL,EAAO,GAGhBM,EAAQD,EAAO,GACfE,EAAOF,EAAO,GACdG,EAAQH,EAAO,EAGrB,IAA+C,mBAApC3D,GAAOC,OAAOG,MAAM2D,cAAmE,GAApC/D,EAAOC,OAAOG,MAAM2D,aAAuB,CAEvG,GAAMC,MAGAC,EAAapB,EAAU,GAAGC,QAAQE,OAClCkB,KACAC,KACAC,IAENC,GAAEC,KAAKzB,EAAU,GAAGC,QAAS,SAACyB,EAAKC,GACjCN,EAAQO,KAAKD,EAAM,GAAGE,aACtBP,EAAKM,KAAKD,EAAM,GAAGzB,OACnBqB,EAAKK,KAAKD,EAAM,GAAGG,QAErBX,EAASE,QAAUA,EACnBF,EAASG,KAAOA,EAChBH,EAASI,KAAOA,CAOhB,KAAK,GAJCQ,GAAO,GAAIC,OAAMZ,GACjBa,EAAO,GAAID,OAAMZ,GACjBc,EAAO,GAAIF,OAAMZ,GAEde,EAAI,EAAGA,EAAI/E,EAAOG,MAAMqB,mBAAoBuD,IACnDhB,EAASG,KAAKM,KAAd,KAAuBO,EAAI,IAC3BJ,EAAKH,KAAKjB,EAAKwB,IACfF,EAAKL,KAAKhB,EAAMuB,IAChBD,EAAKN,KAAKf,EAAMsB,GAElBhB,GAASY,KAAOA,EAChBZ,EAASc,KAAOA,EAChBd,EAASe,KAAOA,CAEhB,IAAME,KAEFC,EAAGlB,EAASG,KACZgB,EAAGnB,EAASI,KACZF,QAASF,EAASE,QAClBkB,KAAM,WACNC,KAAM,gBACNC,KAAOrF,EAAOG,MAAMmF,KACpBC,UAAYvF,EAAOG,MAAMqF,OAAd,QAAgCrC,EAAQ,GAAxC,QAAA,QAA4DA,EAAQnD,EAAOG,MAAMsF,cAAjF,QACXC,QACEC,MAAQ3F,EAAOG,MAAMqF,OAAd,QAAgCrC,EAAQ,GAAxC,MAAA,QAA0DA,EAAQnD,EAAOG,MAAMsF,cAA/E,MACPG,KAAO5F,EAAOG,MAAM0F,WAAc7F,EAAOG,MAAM2F,YAAc,GAE/DR,MACES,MAAO/F,EAAOG,MAAM6F,eAItBf,EAAGlB,EAASG,KACZgB,EAAGnB,EAASY,KACZQ,KAAM,MACNC,KAAM,gBACNM,QACEC,MAAQ3F,EAAOG,MAAMqF,OAAd,QAAgCrC,EAAQ,GAAxC,MAAA,QAA0DA,EAAQnD,EAAOG,MAAM8F,aAA/E,MACPL,KAAO5F,EAAOG,MAAM0F,WAAc7F,EAAOG,MAAM2F,YAAc,GAE/DR,MACES,MAAO/F,EAAOG,MAAM6F,eAKtBf,EAAGlB,EAASG,KACZgB,EAAGnB,EAASc,KACZM,KAAM,QACNE,KAAM,UACNE,UAAAA,QAAmBpC,EAAQnD,EAAOG,MAAM8F,aAAxC,QACAC,KAAM,UACNd,KAAM,SAGNH,EAAGlB,EAASG,KACZgB,EAAGnB,EAASe,KACZK,KAAM,QACNE,KAAM,UACNE,UAAAA,QAAmBpC,EAAQnD,EAAOG,MAAM8F,aAAxC,QACAC,KAAM,UACNd,KAAM,SAIJe,GACJC,OACEF,KAAM,WACNG,MAAOtG,EAAOC,OAAOG,MAAMmG,gBAAkBvG,EAAOC,OAAOG,MAAMC,WAAW,GAAGmG,MAAQ,GACvFC,SAAUzG,EAAOC,OAAOG,MAAMsG,OAC9BC,KAAM3G,EAAOC,OAAOG,MAAMwG,eAI1B3G,GAAOG,MAAMyG,yBAEfxC,EAAAA,gCAAkCrE,EAAOkD,OACxC4D,KADD,+EAE8DlD,EAF9D,UAE6EC,EAF7E,WAE4FC,EAF5F,8CAGuB9D,EAAOkD,MAH9B,2DAOAmB,EAAAA,gCAAkCrE,EAAOkD,OAAS4D,KAAlD,sBAA6E9G,EAAOkD,MAApF,2CAEF,IAAM6D,GAAQtH,EAAUuH,KAAKhH,EAAQiF,EAAvB,aAA+CjF,EAAOkD,MAASkD,EAC7E3G,GAAUwH,UAAUF,EAAO/G,EAAQD,OAG9B,CAEL,GAAMmH,GAASvH,EAAMwH,UAAUnH,EAAQ,GAGjCoH,EAAezH,EAAM0H,gBAAgBrH,EAAQ,GAI7CsH,GADazE,EAAU,GAAGC,QAAQE,UAGxCqB,GAAEC,KAAKzB,EAAU,GAAGC,QAAS,SAACyB,EAAKC,GACjC8C,EAAQ7C,MACND,EAAM,GAAGE,YACTF,EAAM,GAAGzB,MACTmE,EAAOK,OAAOH,GAAc5C,EAAM,GAAGG,MAAM6C,QAAQ,IAAK,KACxD,GACA,GACA,MAIJ,KAAK,GAAIxC,GAAI,EAAGA,EAAI/E,EAAOG,MAAMqB,mBAAoBuD,IACnDsC,EAAQ7C,MACN,GADW,KAEPO,EAAI,GACR,GACAkC,EAAOK,OAAOH,GAAc5D,EAAKwB,IAAIwC,QAAQ,IAAK,KAClDN,EAAOK,OAAOH,GAAc3D,EAAMuB,IAAIwC,QAAQ,IAAK,KACnDN,EAAOK,OAAOH,GAAc1D,EAAMsB,IAAIwC,QAAQ,IAAK,MAIvD,IAAMV,GAAAA,wCACmB9G,EAAOkD,MAD1B,0IAKQlD,EAAOC,OAAOG,MAAMC,WAAW,GAAGmG,MAL1C,kCAMQxG,EAAOC,OAAOG,MAAMO,SAAS,GAAG6F,MANxC,+OAgBN9G,GAAWsH,KAAKjH,EAAKC,EAArB,cAA2CA,EAAOkD,MAASoE,EAASR,EAAM,MAAMlE,KAAK,SAAC6E,GACpF/H,EAAWuH,UAAUQ,EAAOzH,EAAQD,MAI1C,MAAOsC,GAAMqF,YAERrF,EAAMsF",
    "file": "../../js/analysis/holt_winters.js",
    "sourcesContent": [
        "define([\r\n  '../chart/line_chart',\r\n  '../chart/datatables',\r\n  '../util/utils',\r\n  'ng!$q',\r\n  '../../vendor/d3-format.min',\r\n], (lineChart, datatables, utils, $q, d3) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimensions = [{\r\n        qNullSuppression: true,\r\n        qDef: {\r\n          qFieldDefs: [dimension]\r\n        },\r\n      }];\r\n      const measure = utils.validateMeasure(layout.props.measures[0]);\r\n\r\n      let frequency = '';\r\n      if (layout.props.frequency > 0) {\r\n        frequency = `,frequency=${layout.props.frequency}`;\r\n      }\r\n\r\n      let holtWintersParams = '';\r\n      if (!layout.props.autoHoltWinters) {\r\n        holtWintersParams = `,alpha=${layout.props.holtWintersAlpha},beta=${layout.props.holtWintersBeta},gamma=${layout.props.holtWintersGamma}`\r\n      }\r\n\r\n      // Debug mode - set R dataset name to store the q data.\r\n      utils.displayDebugModeMessage(layout.props.debugMode);\r\n      const saveRDataset = utils.getDebugSaveDatasetScript(layout.props.debugMode, 'debug_timeseries_forecast.rda');\r\n\r\n      const defMea1 = `R.ScriptEvalExStr('N', '${saveRDataset} library(jsonlite);library(dplyr);library(forecast);data<-ts(na.omit(q$Measure) ${frequency});\r\n      fit<-HoltWinters(data, seasonal=\"${layout.props.seasonal}\" ${holtWintersParams});\r\n      res<-forecast(fit, level=${layout.props.confidenceLevel}, h=${layout.props.forecastingPeriods});\r\n      json<-toJSON(list(as.double(res$mean),as.double(res$upper),as.double(res$lower),list(fit$alpha, fit$beta, fit$gamma, fit$coefficients))); json;', ${measure} as Measure)`;\r\n\r\n      // Debug mode - display R Scripts to console\r\n      utils.displayRScriptsToConsole(layout.props.debugMode, [defMea1]);\r\n\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: measure,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qDef: defMea1,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * drawChart - draw chart with updated data\r\n     *\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Object} Promise object\r\n     */\r\n    drawChart($scope, app) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      // const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1500,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        if (dataPages[0].qMatrix[0][1].qText.length === 0 || dataPages[0].qMatrix[0][1].qText == '-') {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          // Debug mode - display returned dataset to console\r\n          utils.displayReturnedDatasetToConsole(layout.props.debugMode, dataPages[0]);\r\n\r\n          const palette = utils.getDefaultPaletteColor();\r\n\r\n          const result = JSON.parse(dataPages[0].qMatrix[0][2].qText);\r\n          const mean = result[0];\r\n          const upper = result[1];\r\n          const lower = result[2];\r\n          const params = result[3];\r\n\r\n          // Holt-Winters parameters\r\n          const alpha = params[0];\r\n          const beta = params[1];\r\n          const gamma = params[2];\r\n\r\n          // Chart mode\r\n          if (typeof $scope.layout.props.displayTable == 'undefined' || $scope.layout.props.displayTable == false) {\r\n\r\n            const datasets = {};\r\n\r\n            // Store actual values to datasets\r\n            const dataLength = dataPages[0].qMatrix.length;\r\n            const elemNum = [];\r\n            const dim1 = []; // Dimension\r\n            const mea1 = []; // Actual values\r\n\r\n            $.each(dataPages[0].qMatrix, (key, value) => {\r\n              elemNum.push(value[0].qElemNumber);\r\n              dim1.push(value[0].qText);\r\n              mea1.push(value[1].qNum);\r\n            });\r\n            datasets.elemNum = elemNum;\r\n            datasets.dim1 = dim1;\r\n            datasets.mea1 = mea1;\r\n\r\n            // Store forecast values to datasets\r\n            const mea2 = new Array(dataLength); // Forecast (mean)\r\n            const mea3 = new Array(dataLength); // Forecast (upper)\r\n            const mea4 = new Array(dataLength); // Forecast (lower)\r\n\r\n            for (let i = 0; i < layout.props.forecastingPeriods; i++) {\r\n              datasets.dim1.push(`+${i + 1}`); // Forecast period is displayed as +1, +2, +3...\r\n              mea2.push(mean[i]);\r\n              mea3.push(upper[i]);\r\n              mea4.push(lower[i]);\r\n            }\r\n            datasets.mea2 = mea2;\r\n            datasets.mea3 = mea3;\r\n            datasets.mea4 = mea4;\r\n\r\n            const chartData = [\r\n              {\r\n                x: datasets.dim1,\r\n                y: datasets.mea1,\r\n                elemNum: datasets.elemNum,\r\n                name: 'Observed',\r\n                mode: 'lines+markers',\r\n                fill:  layout.props.line,\r\n                fillcolor: (layout.props.colors) ? `rgba(${palette[3]},0.3)` : `rgba(${palette[layout.props.colorForMain]},0.3)`,\r\n                marker: {\r\n                  color: (layout.props.colors) ? `rgba(${palette[3]},1)` : `rgba(${palette[layout.props.colorForMain]},1)`,\r\n                  size: (layout.props.datapoints) ? layout.props.pointRadius : 1,\r\n                },\r\n                line: {\r\n                  width: layout.props.borderWidth,\r\n                },\r\n              },\r\n              {\r\n                x: datasets.dim1,\r\n                y: datasets.mea2,\r\n                name: 'Fit',\r\n                mode: 'lines+markers',\r\n                marker: {\r\n                  color: (layout.props.colors) ? `rgba(${palette[7]},1)` : `rgba(${palette[layout.props.colorForSub]},1)`,\r\n                  size: (layout.props.datapoints) ? layout.props.pointRadius : 1,\r\n                },\r\n                line: {\r\n                  width: layout.props.borderWidth,\r\n                  //color: `rgba(${palette[layout.props.colorForSub]},1)`,\r\n                },\r\n              },\r\n              {\r\n                x: datasets.dim1,\r\n                y: datasets.mea3,\r\n                name: 'Upper',\r\n                fill: 'tonexty',\r\n                fillcolor: `rgba(${palette[layout.props.colorForSub]},0.3)`,\r\n                type: 'scatter',\r\n                mode: 'none',\r\n              },\r\n              {\r\n                x: datasets.dim1,\r\n                y: datasets.mea4,\r\n                name: 'Lower',\r\n                fill: 'tonexty',\r\n                fillcolor: `rgba(${palette[layout.props.colorForSub]},0.3)`,\r\n                type: 'scatter',\r\n                mode: 'none',\r\n              },\r\n            ];\r\n\r\n            const customOptions = {\r\n              xaxis: {\r\n                type: 'category',\r\n                title: $scope.layout.props.xLabelsAndTitle ? $scope.layout.props.dimensions[0].label : '',\r\n                showgrid: $scope.layout.props.xScale,\r\n                side: $scope.layout.props.xAxisPosition,\r\n              },\r\n            };\r\n\r\n            if (layout.props.displayHoltWintersParams) {\r\n              // Display ARIMA parameters\r\n              $(`.advanced-analytics-toolsets-${$scope.extId}`)\r\n              .html(`\r\n                <div style=\"width:100%;height:5%;text-align:right;\">alpha=${alpha}, beta=${beta}, gamma=${gamma}</div>\r\n                <div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:95%;\"></div>\r\n              `);\r\n            } else {\r\n              // Hide ARIM parameters\r\n              $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:100%;\"></div>`);\r\n            }\r\n            const chart = lineChart.draw($scope, chartData, `aat-chart-${$scope.extId}`, customOptions);\r\n            lineChart.setEvents(chart, $scope, app);\r\n\r\n          // Table display mode\r\n          } else {\r\n            // Get locale info\r\n            const locale = utils.getLocale($scope, 0);\r\n\r\n            // Get number format\r\n            const numberFormat = utils.getNumberFormat($scope, 0);\r\n\r\n            // Store actual values to datasets\r\n            const dataLength = dataPages[0].qMatrix.length;\r\n            const dataset = [];\r\n\r\n            $.each(dataPages[0].qMatrix, (key, value) => {\r\n              dataset.push([\r\n                value[0].qElemNumber,\r\n                value[0].qText,\r\n                locale.format(numberFormat)(value[1].qNum).replace(/G/, 'B'),\r\n                '',\r\n                '',\r\n                '',\r\n              ]);\r\n            });\r\n\r\n            for (let i = 0; i < layout.props.forecastingPeriods; i++) {\r\n              dataset.push([\r\n                '',\r\n                `+${i + 1}`, // Forecast period is displayed as +1, +2, +3...\r\n                '',\r\n                locale.format(numberFormat)(mean[i]).replace(/G/, 'B'),\r\n                locale.format(numberFormat)(upper[i]).replace(/G/, 'B'),\r\n                locale.format(numberFormat)(lower[i]).replace(/G/, 'B'),\r\n              ]);\r\n            }\r\n\r\n            const html = `\r\n              <table id=\"aat-table-${$scope.extId}\" class=\"display\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>qElemNumber</th>\r\n                    <th>${$scope.layout.props.dimensions[0].label}</th>\r\n                    <th>${$scope.layout.props.measures[0].label}</th>\r\n                    <th>Fit</th>\r\n                    <th>Lower</th>\r\n                    <th>Upper</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                </tbody>\r\n              </table>`;\r\n\r\n            datatables.draw(app, $scope, `#aat-table-${$scope.extId}`, dataset, html, null).then((table) => {\r\n              datatables.setEvents(table, $scope, app);\r\n            });\r\n          }\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"
    ]
}