{
    "version": 3,
    "sources": [
        "analysis/simple_linear_bubble.js"
    ],
    "names": [
        "define",
        "bubbleChart",
        "utils",
        "$q",
        "createCube",
        "app",
        "$scope",
        "layout",
        "dimension",
        "validateDimension",
        "props",
        "dimensions",
        "qNullSuppression",
        "qDef",
        "qFieldDefs",
        "displayDebugModeMessage",
        "debugMode",
        "saveRDataset",
        "getDebugSaveDatasetScript",
        "measure1",
        "validateMeasure",
        "measures",
        "measure2",
        "defMea1",
        "interval",
        "confidenceLevel",
        "defMea2",
        "defMea3",
        "displayRScriptsToConsole",
        "qLabel",
        "backendApi",
        "applyPatches",
        "qPath",
        "qOp",
        "qValue",
        "JSON",
        "stringify",
        "patchApplied",
        "drawChart",
        "defer",
        "pageExtensionData",
        "dataPages",
        "measureInfo",
        "qHyperCube",
        "qMeasureInfo",
        "isNaN",
        "qMin",
        "qMax",
        "displayConnectionError",
        "extId",
        "displayReturnedDatasetToConsole",
        "palette",
        "getDefaultPaletteColor",
        "elemNum",
        "dim1",
        "mea1",
        "mea2",
        "mea3",
        "mea4",
        "mea5",
        "datasets",
        "map",
        "value",
        "qElemNumber",
        "qText",
        "qNum",
        "sort",
        "a",
        "b",
        "parseFloat",
        "$",
        "each",
        "key",
        "push",
        "chartData",
        "x",
        "y",
        "text",
        "name",
        "mode",
        "type",
        "marker",
        "color",
        "colors",
        "colorForMain",
        "size",
        "bubbleSize",
        "line",
        "colorForSub",
        "fill",
        "fillcolor",
        "html",
        "chart",
        "draw",
        "setEvents",
        "resolve",
        "promise"
    ],
    "mappings": "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",
    "file": "../../js/analysis/simple_linear_bubble.js",
    "sourcesContent": [
        "define([\r\n  '../chart/bubble_chart',\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (bubbleChart, utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const dimensions = [\r\n        {\r\n          qNullSuppression: true,\r\n          qDef: {\r\n            qFieldDefs: [dimension],\r\n            // qSortCriterias: layout.qHyperCubeDef.qDimensions[0].qDef.qSortCriterias\r\n          },\r\n        },\r\n      ];\r\n\r\n      // Debug mode - set R dataset name to store the q data.\r\n      utils.displayDebugModeMessage(layout.props.debugMode);\r\n      const saveRDataset = utils.getDebugSaveDatasetScript(layout.props.debugMode, 'debug_simple_linear_bubble.rda');\r\n\r\n      const measure1 = utils.validateMeasure(layout.props.measures[0]);\r\n      const measure2 = utils.validateMeasure(layout.props.measures[1]);\r\n\r\n      const defMea1 = `R.ScriptEval('${saveRDataset} lm_result <- lm(q$Measure2~q$Measure1);predict(lm_result, interval=\"${layout.props.interval}\", level=${layout.props.confidenceLevel})[,1]',${measure1} as Measure1, ${measure2} as Measure2)`;\r\n      const defMea2 = `R.ScriptEval('lm_result <- lm(q$Measure2~q$Measure1);predict(lm_result, interval=\"${layout.props.interval}\", level=${layout.props.confidenceLevel})[,2]',${measure1} as Measure1, ${measure2} as Measure2)`;\r\n      const defMea3 = `R.ScriptEval('lm_result <- lm(q$Measure2~q$Measure1);predict(lm_result, interval=\"${layout.props.interval}\", level=${layout.props.confidenceLevel})[,3]',${measure1} as Measure1, ${measure2} as Measure2)`;\r\n\r\n      // Debug mode - display R Scripts to console\r\n      utils.displayRScriptsToConsole(layout.props.debugMode, [defMea1, defMea2, defMea3]);\r\n\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: measure1,\r\n            // qSortBy: layout.qHyperCubeDef.qMeasures[0].qSortBy, // Sort definition\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qDef: measure2,\r\n            // qSortBy: layout.qHyperCubeDef.qMeasures[1].qSortBy, // Sort definition\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: 'Fit',\r\n            qDef: defMea1,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: 'Lower',\r\n            qDef: defMea2,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: 'Upper',\r\n            qDef:  defMea3,\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n    /**\r\n     * drawChart - draw chart with updated data\r\n     *\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Object} Promise object\r\n     */\r\n    drawChart($scope, app) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1500,\r\n      }];\r\n\r\n      utils.pageExtensionData($scope, (dataPages) => {\r\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\r\n\r\n        // Display error when all measures' grand total return NaN.\r\n        if (isNaN(measureInfo[2].qMin) && isNaN(measureInfo[2].qMax)\r\n          && isNaN(measureInfo[3].qMin) && isNaN(measureInfo[3].qMax)\r\n          && isNaN(measureInfo[4].qMin) && isNaN(measureInfo[4].qMax)\r\n        ) {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          // Debug mode - display returned dataset to console\r\n          utils.displayReturnedDatasetToConsole(layout.props.debugMode, dataPages);\r\n\r\n          const palette = utils.getDefaultPaletteColor();\r\n\r\n          const elemNum = [];\r\n          const dim1 = [];\r\n          const mea1 = [];\r\n          const mea2 = [];\r\n          const mea3 = [];\r\n          const mea4 = [];\r\n          const mea5 = [];\r\n\r\n          const datasets = dataPages.map((value) => {\r\n            return {\r\n              elemNum: value[0].qElemNumber,\r\n              dim1: value[0].qText,\r\n              mea1: value[1].qNum,\r\n              mea2: value[2].qNum,\r\n              mea3: value[3].qNum,\r\n              mea4: value[4].qNum,\r\n              mea5: value[5].qNum,\r\n            };\r\n          });\r\n\r\n          // Sort datasets with mea1 (values for xaxis on bubble chart)\r\n          // When datasets is not sorted, the color fillings between upper and lower\r\n          // line is not done properly.\r\n          datasets.sort((a, b) => {\r\n            return parseFloat(a.mea1) - parseFloat(b.mea1);\r\n          });\r\n\r\n          $.each(datasets, (key, value) => {\r\n            elemNum.push(value.elemNum);\r\n            dim1.push(value.dim1);\r\n            mea1.push(value.mea1);\r\n            mea2.push(value.mea2);\r\n            mea3.push(value.mea3);\r\n            mea4.push(value.mea4);\r\n            mea5.push(value.mea5);\r\n          });\r\n\r\n          const chartData = [\r\n            {\r\n              x: mea1,\r\n              y: mea2,\r\n              elemNum,\r\n              text: dim1,\r\n              name: dimension,\r\n              mode: 'markers',\r\n              type: 'scatter',\r\n              marker: {\r\n                color: (layout.props.colors) ? `rgba(${palette[3]},0.8)` : `rgba(${palette[layout.props.colorForMain]},0.8)`,\r\n                size: layout.props.bubbleSize,\r\n              },\r\n            },\r\n            {\r\n              x: mea1,\r\n              y: mea3,\r\n              name: 'Fit',\r\n              line: {\r\n                color: `rgba(${palette[layout.props.colorForSub]},1)`,\r\n              },\r\n            },\r\n            {\r\n              x: mea1,\r\n              y: mea4,\r\n              name: 'Lower',\r\n              fill: 'tonexty',\r\n              fillcolor: `rgba(${palette[layout.props.colorForSub]},0.3)`,\r\n              type: 'scatter',\r\n              mode: 'none',\r\n            },\r\n            {\r\n              x: mea1,\r\n              y: mea5,\r\n              name: 'Upper',\r\n              fill: 'tonexty',\r\n              fillcolor: `rgba(${palette[layout.props.colorForSub]},0.3)`,\r\n              type: 'scatter',\r\n              mode: 'none',\r\n            },\r\n          ];\r\n\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:100%;\"></div>`);\r\n\r\n          const chart = bubbleChart.draw($scope, app, chartData, `aat-chart-${$scope.extId}`, null);\r\n          bubbleChart.setEvents(chart, $scope, app);\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"
    ]
}