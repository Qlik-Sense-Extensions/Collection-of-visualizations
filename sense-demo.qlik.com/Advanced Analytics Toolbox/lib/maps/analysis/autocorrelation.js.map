{
    "version": 3,
    "sources": [
        "analysis/autocorrelation.js"
    ],
    "names": [
        "define",
        "lineChart",
        "utils",
        "$q",
        "createCube",
        "app",
        "$scope",
        "layout",
        "dimension",
        "validateDimension",
        "props",
        "dimensions",
        "qNullSuppression",
        "qDef",
        "qFieldDefs",
        "measure",
        "validateMeasure",
        "measures",
        "observed",
        "differencing",
        "seasonalDifferences",
        "firstDifferences",
        "lagMax",
        "lagMaxValue",
        "commands",
        "expressions",
        "$",
        "each",
        "key",
        "value",
        "displayDebugModeMessage",
        "debugMode",
        "saveRDataset",
        "getDebugSaveDatasetScript",
        "defMea1",
        "acf",
        "defMea2",
        "pacf",
        "defMea3",
        "displayRScriptsToConsole",
        "qLabel",
        "backendApi",
        "applyPatches",
        "qPath",
        "qOp",
        "qValue",
        "JSON",
        "stringify",
        "patchApplied",
        "drawChart",
        "defer",
        "requestPage",
        "qTop",
        "qLeft",
        "qWidth",
        "qHeight",
        "getData",
        "then",
        "dataPages",
        "measureInfo",
        "qHyperCube",
        "qMeasureInfo",
        "isNaN",
        "qMin",
        "qMax",
        "displayConnectionError",
        "extId",
        "displayReturnedDatasetToConsole",
        "palette",
        "getDefaultPaletteColor",
        "high",
        "qMatrix",
        "qNum",
        "low",
        "elemNum",
        "dim1",
        "mea1",
        "push",
        "qElemNumber",
        "qText",
        "i",
        "shift",
        "chartData",
        "x",
        "y",
        "name",
        "mode",
        "fill",
        "line",
        "fillcolor",
        "colors",
        "colorForMain",
        "marker",
        "color",
        "size",
        "datapoints",
        "pointRadius",
        "width",
        "borderWidth",
        "xaxis",
        "yaxis",
        "b_dim1",
        "b_mea1",
        "highLine",
        "lowLine",
        "b_chartData",
        "id",
        "_loop",
        "j",
        "type",
        "colorForSub",
        "dash",
        "customOptions",
        "zeroline",
        "showgrid",
        "xScale",
        "domain",
        "tickformat",
        "getTickFormat",
        "tickprefix",
        "getPrefix",
        "ticksuffix",
        "getSuffix",
        "yScale",
        "xaxis2",
        "anchor",
        "yaxis2",
        "xaxis3",
        "yaxis3",
        "html",
        "chart",
        "draw",
        "setEvents",
        "resolve",
        "promise"
    ],
    "mappings": "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",
    "file": "../../js/analysis/autocorrelation.js",
    "sourcesContent": [
        "define([\r\n  '../chart/line_chart',\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (lineChart, utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const dimensions = [{\r\n        qNullSuppression: true,\r\n        qDef: {\r\n          qFieldDefs: [dimension]\r\n        },\r\n      }];\r\n\r\n      const measure = utils.validateMeasure(layout.props.measures[0]);\r\n\r\n      // Set  first and seasonal differences to observed value\r\n      let observed = null;\r\n      if (layout.props.differencing === 1) {\r\n        observed = `R.ScriptEval('diff(na.omit(q$Measure),  ${layout.props.seasonalDifferences})', ${measure} as Measure)`;\r\n      } else if (layout.props.differencing === 2) {\r\n        observed = `R.ScriptEval('diff(diff(na.omit(q$Measure), ${layout.props.seasonalDifferences}), ${layout.props.firstDifferences})', ${measure} as Measure)`;\r\n      } else {\r\n        observed = measure;\r\n      }\r\n\r\n      // Lag Max\r\n      let lagMax = '';\r\n\r\n      if (layout.props.lagMax === false) {\r\n        lagMax = `, lag.max=${layout.props.lagMaxValue} `;\r\n      }\r\n\r\n      // Set first and seasonal differences to acf and pacf\r\n      const commands = ['acf', 'pacf'];\r\n      const expressions = [];\r\n\r\n      $.each(commands, (key, value) => {\r\n        if (layout.props.differencing === 1) {\r\n          expressions[value] = `${value}(diff(na.omit(q$Measure), ${layout.props.seasonalDifferences}),plot=FALSE ${lagMax})$acf`;\r\n        } else if (layout.props.differencing === 2) {\r\n          expressions[value] = `${value}(diff(diff(na.omit(q$Measure), ${layout.props.seasonalDifferences}), ${layout.props.firstDifferences}),plot=FALSE ${lagMax})$acf`;\r\n        } else {\r\n          expressions[value] = `${value}(na.omit(q$Measure),plot=FALSE ${lagMax})$acf`;\r\n        }\r\n      });\r\n\r\n      // Debug mode - set R dataset name to store the q data.\r\n      utils.displayDebugModeMessage(layout.props.debugMode);\r\n      const saveRDataset = utils.getDebugSaveDatasetScript(layout.props.debugMode, 'debug_autocorrelation.rda');\r\n\r\n      const defMea1 = `R.ScriptEval('${saveRDataset} ${expressions.acf}', ${measure} as Measure)`;\r\n      const defMea2 = `R.ScriptEval('${expressions.pacf}', ${measure} as Measure)`;\r\n      const defMea3 = `R.ScriptEval('high<-qnorm((1 + 0.95)/2)/sqrt(length(q$Measure));low<-qnorm((1 - 0.95)/2)/sqrt(length(q$Measure));c(high, low)', ${measure} as Measure)`;\r\n\r\n      // Debug mode - display R Scripts to console\r\n      utils.displayRScriptsToConsole(layout.props.debugMode, [defMea1, defMea2, defMea3]);\r\n\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: observed,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qDef: defMea1,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qDef: defMea2,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qDef: defMea3,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n    /**\r\n     * drawChart - draw chart with updated data\r\n     *\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Object} Promise object\r\n     */\r\n    drawChart($scope, app) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1500,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\r\n\r\n        // Display error when all measures' grand total return NaN.\r\n        if (isNaN(measureInfo[0].qMin) && isNaN(measureInfo[0].qMax)\r\n          && isNaN(measureInfo[1].qMin) && isNaN(measureInfo[1].qMax)\r\n          && isNaN(measureInfo[2].qMin) && isNaN(measureInfo[2].qMax)\r\n          && isNaN(measureInfo[3].qMin) && isNaN(measureInfo[3].qMax)\r\n        ) {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          // Debug mode - display returned dataset to console\r\n          utils.displayReturnedDatasetToConsole(layout.props.debugMode, dataPages[0]);\r\n\r\n          const palette = utils.getDefaultPaletteColor();\r\n\r\n          const high = dataPages[0].qMatrix[0][4].qNum;\r\n          const low = dataPages[0].qMatrix[1][4].qNum;\r\n\r\n          // Line Chart\r\n          const elemNum = [];\r\n          const dim1 = [];\r\n          const mea1 = [];\r\n\r\n          $.each(dataPages[0].qMatrix, (key, value) => {\r\n            elemNum.push(value[0].qElemNumber);\r\n            dim1.push(value[0].qText);\r\n            mea1.push(value[1].qNum);\r\n          });\r\n\r\n          // Delete records from dim1 for differencing\r\n          if (layout.props.differencing === 1 || layout.props.differencing === 2) {\r\n            for (let i = 0; i < layout.props.seasonalDifferences; i++) {\r\n              dim1.shift();\r\n            }\r\n          }\r\n          if (layout.props.differencing === 2) {\r\n            for (let i = 0; i < layout.props.firstDifferences; i++) {\r\n              dim1.shift();\r\n            }\r\n          }\r\n\r\n          // Draw chart\r\n          const chartData = [{\r\n            x: dim1,\r\n            y: mea1,\r\n            elemNum,\r\n            name: 'Observed',\r\n            mode: 'lines+markers',\r\n            fill: layout.props.line,\r\n            fillcolor: (layout.props.colors) ? `rgba(${palette[3]},0.3)` : `rgba(${palette[layout.props.colorForMain]},0.3)`,\r\n            marker: {\r\n              color: (layout.props.colors) ? `rgba(${palette[3]},1)` : `rgba(${palette[layout.props.colorForMain]},1)`,\r\n              size: (layout.props.datapoints) ? layout.props.pointRadius : 1,\r\n            },\r\n            line: {\r\n              width: layout.props.borderWidth,\r\n            },\r\n            xaxis: 'x',\r\n            yaxis: 'y',\r\n          }];\r\n\r\n          let b_dim1, b_mea1, highLine, lowLine, b_chartData;\r\n\r\n          const id = [];\r\n          id[2] = 2;\r\n          id[3] = 4;\r\n          // Loop to draw two bar charts for Autocorrelation and Partial Autocorrelation\r\n          for (let i = 2; i < 4; i++) {\r\n            b_dim1 = [];\r\n            b_mea1 = [];\r\n            highLine = [];\r\n            lowLine = [];\r\n            b_chartData = {};\r\n\r\n            let j = i - 2; // acf starts from 0, and pacf starts from 1\r\n            $.each(dataPages[0].qMatrix, (key, value) => {\r\n              if (value[i].qText === '-') { return false; }\r\n              b_dim1.push(j);\r\n              b_mea1.push(value[i].qNum);\r\n              highLine.push(high);\r\n              lowLine.push(low);\r\n              j++;\r\n            });\r\n\r\n            // Draw chart\r\n            chartData.push(\r\n              {\r\n                x: b_dim1,\r\n                y: b_mea1,\r\n                name: (i === 2) ? 'Autocorrelation' : 'Partial Autocorrelation',\r\n                marker: {\r\n                  color: `rgba(${palette[layout.props.colorForMain]},1)`,\r\n                },\r\n                type: 'bar',\r\n                width: 0.3,\r\n                xaxis: 'x' + i,\r\n                yaxis: 'y' + i,\r\n              },\r\n            );\r\n            chartData.push(\r\n              {\r\n                x: b_dim1,\r\n                y: highLine,\r\n                name: 'Upper',\r\n                type: 'scatter',\r\n                line: {\r\n                  color: `rgba(${palette[layout.props.colorForSub]},1)`,\r\n                  dash: 'dash',\r\n                },\r\n                marker: {\r\n                  size: 1,\r\n                },\r\n                xaxis: 'x' + i,\r\n                yaxis: 'y' + i,\r\n              },\r\n            );\r\n            chartData.push(\r\n              {\r\n                x: b_dim1,\r\n                y: lowLine,\r\n                name: 'Lower',\r\n                type: 'scatter',\r\n                line: {\r\n                  color: `rgba(${palette[layout.props.colorForSub]},1)`,\r\n                  dash: 'dash',\r\n                },\r\n                marker: {\r\n                  size: 1,\r\n                },\r\n                xaxis: 'x' + i,\r\n                yaxis: 'y' + i,\r\n              },\r\n            );\r\n          } // end of for loop\r\n\r\n          const customOptions = {\r\n            xaxis: {\r\n              zeroline: false,\r\n              showgrid: $scope.layout.props.xScale,\r\n            },\r\n            yaxis: {\r\n              domain: [0.65, 1],\r\n              tickformat: utils.getTickFormat($scope, 0),\r\n              tickprefix: utils.getPrefix($scope, 0),\r\n              ticksuffix: utils.getSuffix($scope, 0),\r\n              showgrid: $scope.layout.props.yScale,\r\n            },\r\n            xaxis2: {\r\n              domain: [0, 0.45],\r\n              anchor: 'y2',\r\n              showgrid: $scope.layout.props.xScale,\r\n            },\r\n            yaxis2: {\r\n              domain: [0, 0.45],\r\n              anchor: 'x2',\r\n              showgrid: $scope.layout.props.yScale,\r\n            },\r\n            xaxis3: {\r\n              domain: [0.55, 1],\r\n              anchor: 'y3',\r\n              showgrid: $scope.layout.props.xScale,\r\n            },\r\n            yaxis3: {\r\n              domain: [0, 0.45],\r\n              anchor: 'x3',\r\n              showgrid: $scope.layout.props.yScale,\r\n            },\r\n          };\r\n\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div id=\"aat-chart-${$scope.extId}\" class=\"simple\" style=\"width:100%;height:100%;\"></div>`);\r\n\r\n          const chart = lineChart.draw($scope, chartData, `aat-chart-${$scope.extId}`, customOptions);\r\n          lineChart.setEvents(chart, $scope, app);\r\n\r\n        } // end of if condition\r\n        return defer.resolve();\r\n      }); // end of backend API callback\r\n      return defer.promise;\r\n    }, // end of drawChart function\r\n  };\r\n});\r\n"
    ]
}