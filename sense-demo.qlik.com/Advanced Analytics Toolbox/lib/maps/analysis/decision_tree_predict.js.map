{
    "version": 3,
    "sources": [
        "analysis/decision_tree_predict.js"
    ],
    "names": [
        "define",
        "tree",
        "d3",
        "utils",
        "$q",
        "createCube",
        "app",
        "$scope",
        "layout",
        "dimension",
        "validateDimension",
        "props",
        "dimensions",
        "qNullSuppression",
        "qDef",
        "qFieldDefs",
        "meaLen",
        "measures",
        "length",
        "params",
        "validateMeasure",
        "meaList",
        "dataType",
        "paramNames",
        "measureLabels",
        "label",
        "i",
        "mea",
        "param",
        "push",
        "splitData",
        "splitPercentage",
        "predictType",
        "MAE",
        "rpartMethod",
        "displayDebugModeMessage",
        "debugMode",
        "saveRDataset",
        "getDebugSaveDatasetScript",
        "defMea1",
        "minSplit",
        "minBucket",
        "cp",
        "maxDepth",
        "displayRScriptsToConsole",
        "qLabel",
        "backendApi",
        "applyPatches",
        "qPath",
        "qOp",
        "qValue",
        "JSON",
        "stringify",
        "patchApplied",
        "drawChart",
        "defer",
        "requestPage",
        "qTop",
        "qLeft",
        "qWidth",
        "qHeight",
        "getData",
        "then",
        "dataPages",
        "qMatrix",
        "qText",
        "displayConnectionError",
        "extId",
        "displayReturnedDatasetToConsole",
        "result",
        "parse",
        "rowLabels",
        "columnLabels",
        "data",
        "numOfRows",
        "roundWithDecimals",
        "n",
        "decimals",
        "Math",
        "round",
        "pow",
        "html",
        "accuracyDenominator",
        "accuracyNumerator",
        "precisions",
        "recallDenominator",
        "recallNumerator",
        "recalls",
        "j",
        "precisionDenominator",
        "precisionNumerator",
        "sum",
        "arr",
        "reduce",
        "prev",
        "current",
        "average",
        "fn",
        "$",
        "resolve",
        "promise"
    ],
    "mappings": "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",
    "file": "../../js/analysis/decision_tree_predict.js",
    "sourcesContent": [
        "define([\r\n  '../chart/tree_chart',\r\n  '../../vendor/d3.min',\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (tree, d3, utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const dimensions = [{\r\n        qNullSuppression: true,\r\n        qDef: {\r\n          qFieldDefs: [dimension]\r\n        },\r\n      }];\r\n\r\n      const meaLen = layout.props.measures.length;\r\n      let params = `${utils.validateMeasure(layout.props.measures[0])} as mea0, ${utils.validateMeasure(layout.props.measures[1])} as mea1`;\r\n      let meaList = 'mea0 ~ mea1';\r\n      let dataType = 'SS';\r\n\r\n      // Array to replace param names (q$meaX) to a measure label on tree chart\r\n      $scope.paramNames = ['mea0', 'mea1'];\r\n      $scope.measureLabels = [layout.props.measures[0].label, layout.props.measures[1].label];\r\n\r\n      for (let i = 2; i < meaLen; i++) {\r\n        const mea = utils.validateMeasure(layout.props.measures[i]);\r\n        if (mea.length > 0) {\r\n          const param = `,${mea} as mea${i}`;\r\n          params += param;\r\n          meaList += ` + mea${i}`;\r\n          dataType += 'S';\r\n\r\n          $scope.paramNames.push(`mea${i}`);\r\n          $scope.measureLabels.push(layout.props.measures[i].label);\r\n        }\r\n      }\r\n\r\n      // Split dataset into training and test datasets\r\n      const splitData = utils.splitData(true, layout.props.splitPercentage, meaLen);\r\n\r\n      // type in predict method for regression tree is 'vector' not 'anova'\r\n      let predictType = 'class';\r\n      let MAE = ''; // Calculate mean absolute error for regression tree\r\n      if (layout.props.rpartMethod === 'anova') {\r\n        predictType = 'vector';\r\n        MAE = ',mean(abs(test_data$mea0-pred))'\r\n      }\r\n\r\n      // Debug mode - set R dataset name to store the q data.\r\n      utils.displayDebugModeMessage(layout.props.debugMode);\r\n      const saveRDataset = utils.getDebugSaveDatasetScript(layout.props.debugMode, 'debug_decision_tree_predict.rda');\r\n\r\n      const defMea1 = `R.ScriptEvalExStr('${dataType}','${saveRDataset} library(rpart);library(jsonlite);set.seed(10);\r\n              q<-lapply(q, function(x){ ifelse(!is.na(as.numeric(x)), as.numeric(x), x) }); ${splitData}\r\n              res<-rpart(${meaList}, data=training_data, method=\"${layout.props.rpartMethod}\", control=list(minsplit=${layout.props.minSplit}, minbucket=${layout.props.minBucket}, cp=${layout.props.cp}, maxdepth=${layout.props.maxDepth}));\r\n              pred <- predict(res, test_data, type=\"${predictType}\"); conf.mat <- table(pred, test_data$mea0);\r\n              json<-toJSON(list(list(attributes(conf.mat)$dimnames[[1]], attributes(conf.mat)$dimnames[[2]]), unname(split(conf.mat, seq(nrow(conf.mat)))), c(length(training_data$mea0), length(test_data$mea0))${MAE})); json;',${params})`;\r\n\r\n      // Debug mode - display R Scripts to console\r\n      utils.displayRScriptsToConsole(layout.props.debugMode, [defMea1]);\r\n\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: defMea1,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n    /**\r\n     * drawChart - draw chart with updated data\r\n     *\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Object} Promise object\r\n     */\r\n    drawChart($scope, app) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        // Display error when all measures' grand total return NaN.\r\n        if (dataPages[0].qMatrix[0][1].qText.length === 0 || dataPages[0].qMatrix[0][1].qText == '-') {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          // Debug mode - display returned dataset to console\r\n          utils.displayReturnedDatasetToConsole(layout.props.debugMode, dataPages[0]);\r\n\r\n          const result = JSON.parse(dataPages[0].qMatrix[0][1].qText);\r\n\r\n          const rowLabels = result[0][0];\r\n          const columnLabels = result[0][1];\r\n          const data = result[1];\r\n          const numOfRows = result[2];\r\n\r\n          // Helper to round Number\r\n          const roundWithDecimals = (n, decimals) => {\r\n            return Math.round(n * Math.pow(10, decimals)) / Math.pow(10, decimals);\r\n          };\r\n\r\n          // Set table header for cunfusion matrix\r\n          let html = `\r\n            <h2>Confusion matrix:</h2>\r\n            <table class=\"simple\" >\r\n              <thead>\r\n                <tr>\r\n                  <th rowspan=\"2\" style=\"border-right:none;\"></th><th rowspan=\"2\"></th><th colspan=\"${columnLabels.length + 1}\" style=\"text-align:center\">Actual class</th>\r\n                </tr>\r\n                <tr>\r\n                  `;\r\n\r\n          for (let i = 0; i < columnLabels.length; i++) {\r\n            html += `<th>${columnLabels[i]}</th>`;\r\n          }\r\n\r\n          html += `<th>Precision</th></tr>\r\n            </thead>\r\n            <tbody>`;\r\n\r\n          // Set table body for cunfusion matrix\r\n          let accuracyDenominator = 0;\r\n          let accuracyNumerator = 0;\r\n          const precisions = [];\r\n          const recallDenominator = [];\r\n          const recallNumerator = [];\r\n          const recalls = [];\r\n\r\n          // Initialize recallDenominator and recallNumerator with zeros\r\n          for (let j = 0; j < columnLabels.length; j++) {\r\n            recallDenominator[j] = 0;\r\n            recallNumerator[j] = 0;\r\n          }\r\n\r\n          // Repeat evey row\r\n          for (let i = 0; i < rowLabels.length; i++) {\r\n            if (i === 0) {\r\n              html += `<tr><td rowspan=\"${rowLabels.length + 1}\" style=\"font-weight:bold; white-space:nowrap; width:20px\">Predicted class</td><td style=\"font-weight:bold\">${rowLabels[i]}</td>`;\r\n            } else {\r\n              html += `<tr><td style=\"font-weight:bold\">${rowLabels[i]}</td>`;\r\n            }\r\n\r\n            let precisionDenominator = 0;\r\n            let precisionNumerator = 0;\r\n            // Repease evey column\r\n            for (let j = 0; j < columnLabels.length; j++) {\r\n              accuracyNumerator += data[i][j];\r\n              precisionNumerator += data[i][j];\r\n              recallNumerator[j] += data[i][j];\r\n              if (rowLabels[i] === columnLabels[j]) {\r\n                accuracyDenominator += data[i][j];\r\n                precisionDenominator += data[i][j];\r\n                recallDenominator[j] += data[i][j];\r\n              }\r\n              html += `<td>${data[i][j]}</td>`;\r\n            }\r\n            precisions.push(precisionDenominator / precisionNumerator);\r\n            // Set precisions\r\n            if (layout.props.rpartMethod === 'class') {\r\n              html += `<td>${roundWithDecimals((precisionDenominator / precisionNumerator) * 100, 3)}%</td></tr>`;\r\n            } else {\r\n              html += '<td>-</td></tr>';\r\n            }\r\n          }\r\n\r\n          // Set recalls\r\n          html += '<tr><td style=\"font-weight:bold;\">Recall</td>';\r\n          for (let j = 0; j < recallDenominator.length; j++) {\r\n            if (layout.props.rpartMethod === 'class') {\r\n              html += `<td>${roundWithDecimals((recallDenominator[j] / recallNumerator[j]) * 100, 3)}%</td>`;\r\n            } else {\r\n              html += '<td>-</td>';\r\n            }\r\n            recalls.push(recallDenominator[j] / recallNumerator[j]);\r\n          }\r\n          html += '<td></td></tr>';\r\n\r\n          html += `</tbody>\r\n                  </table>`;\r\n\r\n          // Helpers for calculating performance measures\r\n          const sum = (arr) => {\r\n            return arr.reduce((prev, current, i, arr) => {\r\n              return prev + current;\r\n            });\r\n          };\r\n\r\n          const average = (arr, fn) => {\r\n            return sum(arr, fn) / arr.length;\r\n          };\r\n\r\n        if (layout.props.rpartMethod === 'anova') {\r\n          // Set performance measures\r\n          html += `<h2>Performance measures:</h2>\r\n                  <table class=\"simple\" style=\"table-layout:fixed;\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>Measures</th><th>Results</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      <tr><td>Mean absolute error (MAE)</td><td>${result[3]}</td></tr>\r\n                    </tbody>\r\n                  </table>\r\n                `;\r\n\r\n        } else {\r\n          // Set performance measures\r\n          html += `<h2>Performance measures:</h2>\r\n                  <table class=\"simple\" style=\"table-layout:fixed;\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>Measures</th><th>Results</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      <tr><td>Accuracy</td><td>${(layout.props.rpartMethod === 'class') ? roundWithDecimals((accuracyDenominator / accuracyNumerator) * 100, 3) + '%' : '-'}</td></tr>\r\n                      <tr><td>Average precision</td><td>${(layout.props.rpartMethod === 'class') ? roundWithDecimals((average(precisions) * 100), 3) + '%' : '-'}</td></tr>\r\n                      <tr><td>Average recall</td><td>${(layout.props.rpartMethod === 'class') ? roundWithDecimals(average(recalls) * 100, 3) + '%' : '-'}</td></tr>\r\n                    </tbody>\r\n                  </table>\r\n                `;\r\n          }\r\n\r\n\r\n          // Set number of rows\r\n          html += `<h2>Number of rows:</h2>\r\n                  <table class=\"simple\" style=\"table-layout:fixed;\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>Datasets</th><th>Number of rows</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      <tr><td>Training data</td><td>${numOfRows[0]}</td></tr>\r\n                      <tr><td>Test data</td><td>${numOfRows[1]}</td></tr>\r\n                      <tr><td>Total</td><td>${numOfRows[0] + numOfRows[1]}</td></tr>\r\n                    </tbody>\r\n                  </table>\r\n                `;\r\n\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(html);\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"
    ]
}