{
    "version": 3,
    "sources": [
        "analysis/kmeans_means.js"
    ],
    "names": [
        "define",
        "bubbleChart",
        "utils",
        "$q",
        "createCube",
        "app",
        "$scope",
        "layout",
        "numberOfClusters",
        "props",
        "dimension",
        "validateDimension",
        "dimensions",
        "qNullSuppression",
        "qDef",
        "qFieldDefs",
        "meaLen",
        "measures",
        "length",
        "params",
        "validateMeasure",
        "meaList",
        "dataType",
        "i",
        "mea",
        "param",
        "data",
        "scaleData",
        "displayDebugModeMessage",
        "debugMode",
        "saveRDataset",
        "getDebugSaveDatasetScript",
        "defMea1",
        "displayRScriptsToConsole",
        "qLabel",
        "backendApi",
        "applyPatches",
        "qPath",
        "qOp",
        "qValue",
        "JSON",
        "stringify",
        "patchApplied",
        "drawChart",
        "defer",
        "requestPage",
        "qTop",
        "qLeft",
        "qWidth",
        "qHeight",
        "getData",
        "then",
        "dataPages",
        "qMatrix",
        "qText",
        "displayConnectionError",
        "extId",
        "displayReturnedDatasetToConsole",
        "result",
        "parse",
        "getOneHundredColors",
        "push",
        "label",
        "chartData",
        "customOptions",
        "xaxis",
        "title",
        "xLabelsAndTitle",
        "showgrid",
        "xScale",
        "side",
        "xAxisPosition",
        "yaxis",
        "yLabelsAndTitle",
        "yScale",
        "yAxisPosition",
        "tickformat",
        "getTickFormat",
        "tickprefix",
        "getPrefix",
        "ticksuffix",
        "getSuffix",
        "barmode",
        "dividedBy",
        "$",
        "each",
        "key",
        "value",
        "x",
        "y",
        "name",
        "type",
        "clusterList",
        "variableData",
        "subkey",
        "subvalue",
        "html",
        "draw",
        "css",
        "on",
        "resolve",
        "promise"
    ],
    "mappings": "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",
    "file": "../../js/analysis/kmeans_means.js",
    "sourcesContent": [
        "define([\r\n  '../chart/bubble_chart',\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (bubbleChart, utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      const numberOfClusters = layout.props.numberOfClusters;\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const dimensions = [\r\n        {\r\n          qNullSuppression: true,\r\n          qDef: {\r\n            qFieldDefs: [dimension],\r\n            // qSortCriterias: layout.qHyperCubeDef.qDimensions[0].qDef.qSortCriterias\r\n          },\r\n        },\r\n      ];\r\n      const meaLen = layout.props.measures.length;\r\n      let params = `${utils.validateMeasure(layout.props.measures[0])} as mea0`;\r\n      let meaList = 'q$mea0';\r\n      let dataType = 'N';\r\n\r\n      for (let i = 1; i < meaLen; i++) {\r\n        const mea = utils.validateMeasure(layout.props.measures[i]);\r\n        if (mea.length > 0) {\r\n          const param = `,${mea} as mea${i}`;\r\n          params += param;\r\n          meaList += `,q$mea${i}`;\r\n          dataType += 'N';\r\n        }\r\n      }\r\n\r\n      let data = `cbind(${meaList})`;\r\n      if (layout.props.scaleData) {\r\n        data = `scale(cbind(${meaList}))`;\r\n      }\r\n\r\n      // Debug mode - set R dataset name to store the q data.\r\n      utils.displayDebugModeMessage(layout.props.debugMode);\r\n      const saveRDataset = utils.getDebugSaveDatasetScript(layout.props.debugMode, 'debug_kmeans_means.rda');\r\n\r\n      const defMea1 = `R.ScriptEvalExStr('${dataType}', '${saveRDataset} library(jsonlite); set.seed(1); json<-toJSON(kmeans(${data},${numberOfClusters})$centers); json;', ${params})`;\r\n\r\n      // Debug mode - display R Scripts to console\r\n      utils.displayRScriptsToConsole(layout.props.debugMode, [defMea1]);\r\n\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: defMea1,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n    /**\r\n     * drawChart - draw chart with updated data\r\n     *\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Object} Promise object\r\n     */\r\n    drawChart($scope, app) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        // Display error when all measures' grand total return NaN.\r\n        if (dataPages[0].qMatrix[0][1].qText.length === 0 || dataPages[0].qMatrix[0][1].qText == '-') {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          // Debug mode - display returned dataset to console\r\n          utils.displayReturnedDatasetToConsole(layout.props.debugMode, dataPages[0]);\r\n\r\n          const result = JSON.parse(dataPages[0].qMatrix[0][1].qText);\r\n          const palette = utils.getOneHundredColors();\r\n\r\n          const meaLen = layout.props.measures.length;\r\n          const meaList = [];\r\n\r\n          for (let i = 0; i < meaLen; i++) {\r\n            meaList.push(layout.props.measures[i].label);\r\n          }\r\n\r\n          const chartData = [];\r\n          const customOptions = {\r\n            xaxis: {\r\n              title: $scope.layout.props.xLabelsAndTitle ? 'Variables' : '',\r\n              showgrid: $scope.layout.props.xScale,\r\n              side: $scope.layout.props.xAxisPosition,\r\n            },\r\n            yaxis: {\r\n              title: $scope.layout.props.yLabelsAndTitle ? 'Y' : '',\r\n              showgrid: $scope.layout.props.yScale,\r\n              side: $scope.layout.props.yAxisPosition,\r\n              tickformat: utils.getTickFormat($scope, 0),\r\n              tickprefix: utils.getPrefix($scope, 0),\r\n              ticksuffix: utils.getSuffix($scope, 0),\r\n            },\r\n            barmode: 'group',\r\n          };\r\n\r\n          // Divide by variables\r\n          if (typeof $scope.layout.props.dividedBy == 'undefined' || $scope.layout.props.dividedBy ==='variables') {\r\n            $.each(result, (key, value) => {\r\n              chartData.push({\r\n                x: meaList,\r\n                y: value,\r\n                name: `cluster ${key + 1}`,\r\n                type: 'bar',\r\n              });\r\n            });\r\n\r\n          // Divide by clusters\r\n          } else {\r\n            // Create list of clusters\r\n            const clusterList = [];\r\n            for (let i = 1; i <= layout.props.numberOfClusters; i++) {\r\n              clusterList.push(`cluster ${i}`);\r\n            }\r\n\r\n            // Create containers for storing data\r\n            const variableData = [];\r\n            for (let i = 0; i < meaLen; i++) {\r\n              variableData[i] = [];\r\n            }\r\n\r\n            $.each(result, (key, value) => {\r\n              $.each(value, (subkey, subvalue) => {\r\n                variableData[subkey].push(subvalue)\r\n              });\r\n            });\r\n\r\n            for (let i = 0; i < meaLen; i++) {\r\n              chartData.push({\r\n                x: clusterList,\r\n                y: variableData[i],\r\n                name: meaList[i],\r\n                type: 'bar',\r\n              });\r\n            }\r\n\r\n            customOptions.xaxis.title = $scope.layout.props.xLabelsAndTitle ? 'Clusters' : '';\r\n          }\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:100%;\"></div>`);\r\n          bubbleChart.draw($scope, app, chartData, `aat-chart-${$scope.extId}`, customOptions);\r\n\r\n          $(`#aat-chart-${$scope.extId} .legend .traces .legendtoggle`).css('display', 'none');\r\n          $(`#aat-chart-${$scope.extId} g.traces`).on('click', (data) => {\r\n            // do nothing\r\n          });\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"
    ]
}