{
    "version": 3,
    "sources": [
        "analysis/regression_analysis.js"
    ],
    "names": [
        "define",
        "utils",
        "$q",
        "createCube",
        "app",
        "$scope",
        "layout",
        "dimension",
        "validateDimension",
        "props",
        "dimensions",
        "qNullSuppression",
        "qDef",
        "qFieldDefs",
        "meaLen",
        "measures",
        "length",
        "rowsLabel",
        "label",
        "validateMeasure",
        "params",
        "meaList",
        "dataType",
        "i",
        "mea",
        "param",
        "push",
        "displayDebugModeMessage",
        "debugMode",
        "saveRDataset",
        "getDebugSaveDatasetScript",
        "defMea1",
        "displayRScriptsToConsole",
        "qLabel",
        "backendApi",
        "applyPatches",
        "qPath",
        "qOp",
        "qValue",
        "JSON",
        "stringify",
        "patchApplied",
        "drawChart",
        "defer",
        "requestPage",
        "qTop",
        "qLeft",
        "qWidth",
        "qHeight",
        "getData",
        "then",
        "dataPages",
        "qHyperCube",
        "qMeasureInfo",
        "qMatrix",
        "qText",
        "displayConnectionError",
        "extId",
        "displayReturnedDatasetToConsole",
        "result",
        "parse",
        "estimate",
        "stdError",
        "tValue",
        "pr",
        "minPr",
        "Math",
        "max",
        "apply",
        "residuals",
        "sigma",
        "df",
        "rSquared",
        "adjRSquared",
        "fstatistic",
        "aic",
        "html",
        "$",
        "resolve",
        "promise"
    ],
    "mappings": "AAAA,YAAAA,SACE,gBACA,SACC,SAACC,EAAOC,GACT,OASEC,WATK,SASMC,EAAKC,GACd,GAAMC,GAASD,EAAOC,OAMhBC,EAAYN,EAAMO,kBAAkBF,EAAOG,MAAMC,WAAW,IAC5DA,IACJC,kBAAkB,EAClBC,MACEC,YAAaN,MAIXO,EAASR,EAAOG,MAAMM,SAASC,MACrCX,GAAOY,WAAa,cAAkD,IAAlCX,EAAOG,MAAMM,SAAS,GAAGG,MAAeZ,EAAOG,MAAMM,SAAS,GAAGG,MAAQjB,EAAMkB,gBAAgBb,EAAOG,MAAMM,SAAS,IAKzJ,KAAK,GAJDK,GAAYnB,EAAMkB,gBAAgBb,EAAOG,MAAMM,SAAS,IAAxD,aAAwEd,EAAMkB,gBAAgBb,EAAOG,MAAMM,SAAS,IAApH,WACAM,EAAU,kBACVC,EAAW,KAENC,EAAI,EAAGA,EAAIT,EAAQS,IAAK,CAC/B,GAAMC,GAAMvB,EAAMkB,gBAAgBb,EAAOG,MAAMM,SAASQ,GACxD,IAAIC,EAAIR,OAAS,EAAG,CAClB,GAAMS,GAAAA,IAAYD,EAAZ,UAAyBD,CAC/BH,IAAUK,EACVJ,GAAAA,WAAsBE,EACtBD,GAAY,IAEZjB,EAAOY,UAAUS,KAAKzB,EAAMkB,gBAAgBb,EAAOG,MAAMM,SAASQ,MAKtEtB,EAAM0B,wBAAwBrB,EAAOG,MAAMmB,UAC3C,IAAMC,GAAe5B,EAAM6B,0BAA0BxB,EAAOG,MAAMmB,UAAW,iCAEvEG,EAAAA,sBAAgCT,EAAhC,MAA8CO,EAA9C,uCAAiGR,EAAjG,0ZAG8DD,EAH9D,GAMNnB,GAAM+B,yBAAyB1B,EAAOG,MAAMmB,WAAYG,GAExD,IAAMhB,KAEFH,MACEA,KAAMmB,KAIRnB,MACEqB,OAAQ,IACRrB,KAAM,MAIRA,MACEqB,OAAQ,IACRrB,KAAM,MAIRA,MACEqB,OAAQ,IACRrB,KAAM,MAIRA,MACEqB,OAAQ,IACRrB,KAAM,KAmBZ,OAdAP,GAAO6B,WAAWC,eAEdC,MAAO,6BACPC,IAAK,UACLC,OAAQC,KAAKC,UAAU9B,KAGvB0B,MAAO,2BACPC,IAAK,UACLC,OAAQC,KAAKC,UAAUzB,MAExB,GAEHV,EAAOoC,cAAe,EACf,MASTC,UA7GK,SA6GKrC,GACR,GAAMsC,GAAQzC,EAAGyC,QACXrC,EAASD,EAAOC,OAGhBsC,GADY3C,EAAMO,kBAAkBF,EAAOG,MAAMC,WAAW,MAEhEmC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,QAAS,IA6FX,OA1FA3C,GAAO6B,WAAWe,QAAQL,GAAaM,KAAK,SAACC,GACvB9C,EAAOC,OAAO8C,WAAWC,YAG7C,IAAgD,IAA5CF,EAAU,GAAGG,QAAQ,GAAG,GAAGC,MAAMvC,QAAoD,KAApCmC,EAAU,GAAGG,QAAQ,GAAG,GAAGC,MAC9EtD,EAAMuD,uBAAuBnD,EAAOoD,WAC/B,CAELxD,EAAMyD,gCAAgCpD,EAAOG,MAAMmB,UAAWuB,EAAU,GAgDxE,KAAK,GA9CCQ,GAASpB,KAAKqB,MAAMT,EAAU,GAAGG,QAAQ,GAAG,GAAGC,OAE/CM,EAAWF,EAAO,GAClBG,EAAWH,EAAO,GAClBI,EAASJ,EAAO,GAChBK,EAAKL,EAAO,GACZM,EAAQC,KAAKC,IAAIC,MAAM,KAAMJ,GAE7BK,EAAYV,EAAO,GAEnBW,EAAQX,EAAO,GACfY,EAAKZ,EAAO,GAEZa,EAAWb,EAAO,GAClBc,EAAcd,EAAO,GAErBe,EAAaf,EAAO,GACpBgB,EAAMhB,EAAO,IAGfiB,EAAAA,0TAUUP,EAAU,GAVpB,YAUkCA,EAAU,GAV5C,YAU0DA,EAAU,GAVpE,YAUkFA,EAAU,GAV5F,YAU0GA,EAAU,GAVpH,qYA0BK9C,EAAI,EAAGA,EAAIlB,EAAOY,UAAUD,OAAQO,IAC3CqD,GAAAA,WAAmBvE,EAAOY,UAAUM,GAApC,YAAkDsC,EAAStC,GAA3D,YAAyEuC,EAASvC,GAAlF,YAAgGwC,EAAOxC,GAAvG,YAAqHyC,EAAGzC,GAAxH,qCACiByC,EAAGzC,GAAK,KAAS,6IAAgJyC,EAAGzC,GAAK,IAAQ,+FAAkGyC,EAAGzC,GAAK,IAAQ,iDAAoDyC,EAAGzC,GAAK,GAAO,IAAM,IAD7X,kCAMFqD,IAAAA,uaAagDN,EAAM,GAbtD,OAa+DC,EAAG,GAblE,qFAc2CC,EAAS,GAdpD,kEAe2CC,EAAY,GAfvD,4DAgBqCC,EAAW,GAhBhD,OAgByDA,EAAW,GAhBpE,QAgB8EA,EAAW,GAhBzF,oBAgB+GT,EAhB/G,mDAiB4BU,EAAI,GAjBhC,sEAuBAE,EAAAA,gCAAkCxE,EAAOoD,OAASmB,KAAKA,GAEzD,MAAOjC,GAAMmC,YAERnC,EAAMoC",
    "file": "../../js/analysis/regression_analysis.js",
    "sourcesContent": [
        "define([\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const dimensions = [{\r\n        qNullSuppression: true,\r\n        qDef: {\r\n          qFieldDefs: [dimension]\r\n        },\r\n      }];\r\n\r\n      const meaLen = layout.props.measures.length;\r\n      $scope.rowsLabel = ['(Intercept)', (layout.props.measures[1].label != '') ? layout.props.measures[1].label : utils.validateMeasure(layout.props.measures[0]) ]; // Label for dimension values\r\n      let params = `${utils.validateMeasure(layout.props.measures[0])} as mea0, ${utils.validateMeasure(layout.props.measures[1])} as mea1`;\r\n      let meaList = 'q$mea0 ~ q$mea1';\r\n      let dataType = 'NN';\r\n\r\n      for (let i = 2; i < meaLen; i++) {\r\n        const mea = utils.validateMeasure(layout.props.measures[i]);\r\n        if (mea.length > 0) {\r\n          const param = `,${mea} as mea${i}`;\r\n          params += param;\r\n          meaList += ` + q$mea${i}`;\r\n          dataType += 'N';\r\n\r\n          $scope.rowsLabel.push(utils.validateMeasure(layout.props.measures[i]));\r\n        }\r\n      }\r\n\r\n      // Debug mode - set R dataset name to store the q data.\r\n      utils.displayDebugModeMessage(layout.props.debugMode);\r\n      const saveRDataset = utils.getDebugSaveDatasetScript(layout.props.debugMode, 'debug_regression_analysis.rda');\r\n\r\n      const defMea1 = `R.ScriptEvalExStr('${dataType}','${saveRDataset} library(jsonlite); lm_result <- lm(${meaList});lm_summary <- summary(lm_result);\r\n      json <- toJSON(list(coef(lm_summary)[,\"Estimate\"], coef(lm_summary)[,\"Std. Error\"], coef(lm_summary)[,\"t value\"], coef(lm_summary)[,\"Pr(>|t|)\"],\r\n      as.double(summary(lm_result$residuals)), summary(lm_result)$sigma, summary(lm_result)$df, lm_summary$r.squared, lm_summary$adj.r.squared,\r\n      summary(lm_result)$fstatistic, extractAIC(lm_result)[2])); json;',${params})`;\r\n\r\n      // Debug mode - display R Scripts to console\r\n      utils.displayRScriptsToConsole(layout.props.debugMode, [defMea1]);\r\n\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: defMea1,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n    /**\r\n    * drawChart - draw chart with updated data\r\n    *\r\n    * @param {Object} $scope angular $scope\r\n    *\r\n    * @return {Object} Promise object\r\n    */\r\n    drawChart($scope) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 2,\r\n        qHeight: 1,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\r\n\r\n        // Display error when all measures' grand total return NaN.\r\n        if (dataPages[0].qMatrix[0][1].qText.length === 0 || dataPages[0].qMatrix[0][1].qText == '-') {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          // Debug mode - display returned dataset to console\r\n          utils.displayReturnedDatasetToConsole(layout.props.debugMode, dataPages[0]);\r\n\r\n          const result = JSON.parse(dataPages[0].qMatrix[0][1].qText);\r\n\r\n          const estimate = result[0];\r\n          const stdError = result[1];\r\n          const tValue = result[2];\r\n          const pr = result[3];\r\n          const minPr = Math.max.apply(null, pr);\r\n\r\n          const residuals = result[4];\r\n\r\n          const sigma = result[5];\r\n          const df = result[6];\r\n\r\n          const rSquared = result[7];\r\n          const adjRSquared = result[8];\r\n\r\n          const fstatistic = result[9];\r\n          const aic = result[10];\r\n\r\n          // Set table header\r\n          let html = `\r\n            <h2>Residuals:</h2>\r\n            <table class=\"simple\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Min</th><th>1Q</th><th>Median</th><th>3Q</th><th>Max</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td>${residuals[0]}</td><td>${residuals[1]}</td><td>${residuals[2]}</td><td>${residuals[4]}</td><td>${residuals[5]}</td>\r\n                </tr>\r\n             </tbody>\r\n            </table>\r\n\r\n            <h2>Coefficients:</h2>\r\n            <table class=\"simple\">\r\n              <thead>\r\n                <tr>\r\n                  <th></th><th>Estimate</th><th>Std.Error</th><th>t value</th><th>Pr(>|t|)</th><th>Signif</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n          `;\r\n\r\n          // Set regression analysis results to table\r\n          for (let i = 0; i < $scope.rowsLabel.length; i++) {\r\n            html += `<tr><td>${$scope.rowsLabel[i]}</td><td>${estimate[i]}</td><td>${stdError[i]}</td><td>${tValue[i]}</td><td>${pr[i]}</td>\r\n                      <td>${(pr[i] < 0.001) ? '<span class=\"lui-icon  lui-icon--star\"></span><span class=\"lui-icon  lui-icon--star\"></span><span class=\"lui-icon  lui-icon--star\"></span>' : (pr[i] < 0.01) ? '<span class=\"lui-icon  lui-icon--star\"></span><span class=\"lui-icon  lui-icon--star\"></span>' : (pr[i] < 0.05) ? '<span class=\"lui-icon  lui-icon--star\"></span>' : (pr[i] < 0.1) ? '.' : ''}</td>\r\n                    </tr>`;\r\n          }\r\n\r\n          // Set table footer and other results\r\n          html += `\r\n              </tbody>\r\n            </table>\r\n            <div>Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1</div>\r\n\r\n            <h2>Others:</h2>\r\n            <table class=\"simple\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Item</th><th>Value</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr><td>Residual standard error</td><td>${sigma[0]} on ${df[1]} degrees of freedom</td></tr>\r\n                <tr><td>Multiple R-squared</td><td>${rSquared[0]}</td></tr>\r\n                <tr><td>Adjusted R-squared</td><td>${adjRSquared[0]}</td></tr>\r\n                <tr><td>F-statistic</td><td> ${fstatistic[0]} on ${fstatistic[1]} and ${fstatistic[2]} DF,  p-value: < ${minPr}</td></tr>\r\n                <tr><td>AIC</td><td>${aic[0]}</td></tr>\r\n             </tbody>\r\n            </table>\r\n          `;\r\n\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(html);\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"
    ]
}