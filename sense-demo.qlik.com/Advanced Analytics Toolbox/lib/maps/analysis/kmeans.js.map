{
    "version": 3,
    "sources": [
        "analysis/kmeans.js"
    ],
    "names": [
        "define",
        "bubbleChart",
        "utils",
        "$q",
        "createCube",
        "app",
        "$scope",
        "layout",
        "numberOfClusters",
        "props",
        "dimension",
        "validateDimension",
        "dimensions",
        "qNullSuppression",
        "qDef",
        "qFieldDefs",
        "meaLen",
        "measures",
        "length",
        "params",
        "validateMeasure",
        "meaList",
        "i",
        "mea",
        "param",
        "data",
        "scaleData",
        "measure1",
        "measure2",
        "displayDebugModeMessage",
        "debugMode",
        "saveRDataset",
        "getDebugSaveDatasetScript",
        "defMea1",
        "displayRScriptsToConsole",
        "qLabel",
        "backendApi",
        "applyPatches",
        "qPath",
        "qOp",
        "qValue",
        "JSON",
        "stringify",
        "patchApplied",
        "drawChart",
        "defer",
        "pageExtensionData",
        "dataPages",
        "measureInfo",
        "qHyperCube",
        "qMeasureInfo",
        "isNaN",
        "qMin",
        "qMax",
        "displayConnectionError",
        "extId",
        "displayReturnedDatasetToConsole",
        "bubbleData",
        "getOneHundredColors",
        "elemNum",
        "text",
        "x",
        "y",
        "$",
        "each",
        "key",
        "value",
        "qNum",
        "push",
        "qElemNumber",
        "qText",
        "chartData",
        "name",
        "mode",
        "type",
        "marker",
        "size",
        "bubbleSize",
        "html",
        "chart",
        "draw",
        "setEvents",
        "css",
        "on",
        "selected",
        "currentTarget",
        "childNodes",
        "textContent",
        "replace",
        "fields",
        "map",
        "d",
        "parseInt",
        "field",
        "expression",
        "selectValues",
        "resolve",
        "promise"
    ],
    "mappings": "AAAA,YAAAA,SACE,wBACA,gBACA,SACC,SAACC,EAAaC,EAAOC,GACtB,OASEC,WATK,SASMC,EAAKC,GAuBd,IAAK,GAtBCC,GAASD,EAAOC,OAKhBC,EAAmBD,EAAOE,MAAMD,iBAGhCE,EAAYR,EAAMS,kBAAkBJ,EAAOE,MAAMG,WAAW,IAC5DA,IAEFC,kBAAkB,EAClBC,MACEC,YAAaL,MAKbM,EAAST,EAAOE,MAAMQ,SAASC,OACjCC,EAAYjB,EAAMkB,gBAAgBb,EAAOE,MAAMQ,SAAS,IAAxD,WACAI,EAAU,SAELC,EAAI,EAAGA,EAAIN,EAAQM,IAAK,CAC/B,GAAMC,GAAMrB,EAAMkB,gBAAgBb,EAAOE,MAAMQ,SAASK,GACxD,IAAIC,EAAIL,OAAS,EAAG,CAClB,GAAMM,GAAAA,IAAYD,EAAZ,UAAyBD,CAC/BH,IAAUK,EACVH,GAAAA,SAAoBC,GAIxB,GAAIG,GAAAA,SAAgBJ,EAAhB,GACAd,GAAOE,MAAMiB,YACfD,EAAAA,eAAsBJ,EAAtB,KAGF,IAAMM,GAAWzB,EAAMkB,gBAAgBb,EAAOE,MAAMQ,SAAS,IACvDW,EAAW1B,EAAMkB,gBAAgBb,EAAOE,MAAMQ,SAAS,GAG7Df,GAAM2B,wBAAwBtB,EAAOE,MAAMqB,UAC3C,IAAMC,GAAe7B,EAAM8B,0BAA0BzB,EAAOE,MAAMqB,UAAW,oBAEvEG,EAAAA,iBAA2BF,EAA3B,uBAA8DN,EAA9D,IAAsEjB,EAAtE,eAAqGW,EAArG,GAGNjB,GAAMgC,yBAAyB3B,EAAOE,MAAMqB,WAAYG,GAExD,IAAMhB,KAEFH,MACEA,KAAMa,KAKRb,MACEA,KAAMc,KAKRd,MACEA,KAAMmB,KAIRnB,MACEqB,OAAQ,IACRrB,KAAM,MAIRA,MACEqB,OAAQ,IACRrB,KAAM,KAmBZ,OAdAR,GAAO8B,WAAWC,eAEdC,MAAO,6BACPC,IAAK,UACLC,OAAQC,KAAKC,UAAU9B,KAGvB0B,MAAO,2BACPC,IAAK,UACLC,OAAQC,KAAKC,UAAUzB,MAExB,GAEHX,EAAOqC,cAAe,EACf,MASTC,UAjHK,SAiHKtC,EAAQD,GAChB,GAAMwC,GAAQ1C,EAAG0C,QACXtC,EAASD,EAAOC,MAgEtB,OA9DAL,GAAM4C,kBAAkBxC,EAAQ,SAACyC,GAC/B,GAAMC,GAAc1C,EAAOC,OAAO0C,WAAWC,YAG7C,IAAIC,MAAMH,EAAY,GAAGI,OAASD,MAAMH,EAAY,GAAGK,MACrDnD,EAAMoD,uBAAuBhD,EAAOiD,WAC/B,CAELrD,EAAMsD,gCAAgCjD,EAAOE,MAAMqB,UAAWiB,EAM9D,KAAK,GADCU,IAHUvD,EAAMwD,0BAIbpC,EAAI,EAAGA,GAAKf,EAAOE,MAAMD,iBAAkBc,IAClDmC,EAAWnC,MACXmC,EAAWnC,GAAGqC,WACdF,EAAWnC,GAAGsC,QACdH,EAAWnC,GAAGuC,KACdJ,EAAWnC,GAAGwC,IAGhBC,GAAEC,KAAKjB,EAAW,SAACkB,EAAKC,GACtBT,EAAWS,EAAM,GAAGC,MAAMR,QAAQS,KAAKF,EAAM,GAAGG,aAChDZ,EAAWS,EAAM,GAAGC,MAAMP,KAAKQ,KAAKF,EAAM,GAAGI,OAC7Cb,EAAWS,EAAM,GAAGC,MAAMN,EAAEO,KAAKF,EAAM,GAAGC,MAC1CV,EAAWS,EAAM,GAAGC,MAAML,EAAEM,KAAKF,EAAM,GAAGC,OAI5C,KAAK,GADCI,MACGjD,EAAI,EAAGA,GAAKf,EAAOE,MAAMD,iBAAkBc,IAClDiD,EAAUH,MACRP,EAAGJ,EAAWnC,GAAGuC,EACjBC,EAAGL,EAAWnC,GAAGwC,EACjBH,QAASF,EAAWnC,GAAGqC,QACvBC,KAAMH,EAAWnC,GAAGsC,KACpBY,KAAAA,WAAiBlD,EACjBmD,KAAM,UACNC,KAAM,UACNC,QAEEC,KAAMrE,EAAOE,MAAMoE,aAMzBd,GAAAA,gCAAkCzD,EAAOiD,OAASuB,KAAlD,sBAA6ExE,EAAOiD,MAApF,2CAEA,IAAMwB,GAAQ9E,EAAY+E,KAAK1E,EAAQD,EAAKkE,EAA9B,aAAsDjE,EAAOiD,MAAS,KACpFtD,GAAYgF,UAAUF,EAAOzE,EAAQD,GACrC0D,EAAAA,cAAgBzD,EAAOiD,MAAvB,kCAA8D2B,IAAI,UAAW,QAC7EnB,EAAAA,cAAgBzD,EAAOiD,MAAvB,aAAyC4B,GAAG,QAAS,SAAC1D,GACpD,GAAM2D,GAAW3B,EAAWhC,EAAK4D,cAAcC,WAAW,GAAGC,YAAYC,QAAQ,WAAW,KAAK5B,KAC3F6B,EAASL,EAASM,IAAI,SAACC,GAC3B,MAAOC,UAASD,EAAG,KAErBtF,GAAIwF,MAAMvF,EAAOC,OAAOE,MAAMG,WAAW,GAAGkF,YAAYC,aAAaN,GAAQ,GAAM,KAGvF,MAAO5C,GAAMmD,YAERnD,EAAMoD",
    "file": "../../js/analysis/kmeans.js",
    "sourcesContent": [
        "define([\r\n  '../chart/bubble_chart',\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (bubbleChart, utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      const numberOfClusters = layout.props.numberOfClusters;\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const dimensions = [\r\n        {\r\n          qNullSuppression: true,\r\n          qDef: {\r\n            qFieldDefs: [dimension],\r\n            // qSortCriterias: layout.qHyperCubeDef.qDimensions[0].qDef.qSortCriterias\r\n          },\r\n        },\r\n      ];\r\n      const meaLen = layout.props.measures.length;\r\n      let params = `${utils.validateMeasure(layout.props.measures[0])} as mea0`;\r\n      let meaList = 'q$mea0';\r\n\r\n      for (let i = 1; i < meaLen; i++) {\r\n        const mea = utils.validateMeasure(layout.props.measures[i]);\r\n        if (mea.length > 0) {\r\n          const param = `,${mea} as mea${i}`;\r\n          params += param;\r\n          meaList += `,q$mea${i}`;\r\n        }\r\n      }\r\n\r\n      let data = `cbind(${meaList})`;\r\n      if (layout.props.scaleData) {\r\n        data = `scale(cbind(${meaList}))`;\r\n      }\r\n\r\n      const measure1 = utils.validateMeasure(layout.props.measures[0]);\r\n      const measure2 = utils.validateMeasure(layout.props.measures[1]);\r\n\r\n      // Debug mode - set R dataset name to store the q data.\r\n      utils.displayDebugModeMessage(layout.props.debugMode);\r\n      const saveRDataset = utils.getDebugSaveDatasetScript(layout.props.debugMode, 'debug_kmeans.rda');\r\n\r\n      const defMea1 = `R.ScriptEval('${saveRDataset} set.seed(1);kmeans(${data},${numberOfClusters})$cluster', ${params})`;\r\n\r\n      // Debug mode - display R Scripts to console\r\n      utils.displayRScriptsToConsole(layout.props.debugMode, [defMea1]);\r\n\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: measure1,\r\n            // qSortBy: layout.qHyperCubeDef.qMeasures[0].qSortBy, // Sort definition\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qDef: measure2,\r\n            // qSortBy: layout.qHyperCubeDef.qMeasures[1].qSortBy, // Sort definition\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qDef: defMea1,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n    /**\r\n     * drawChart - draw chart with updated data\r\n     *\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Object} Promise object\r\n     */\r\n    drawChart($scope, app) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      utils.pageExtensionData($scope, (dataPages) => {\r\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\r\n\r\n        // Display error when all measures' grand total return NaN.\r\n        if (isNaN(measureInfo[2].qMin) && isNaN(measureInfo[2].qMax)) {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          // Debug mode - display returned dataset to console\r\n          utils.displayReturnedDatasetToConsole(layout.props.debugMode, dataPages);\r\n\r\n          const palette = utils.getOneHundredColors();\r\n\r\n          // Create containers for storing bubble data\r\n          const bubbleData = [];\r\n          for (let i = 1; i <= layout.props.numberOfClusters; i++) {\r\n            bubbleData[i] = [];\r\n            bubbleData[i].elemNum = [];\r\n            bubbleData[i].text = [];\r\n            bubbleData[i].x = [];\r\n            bubbleData[i].y = [];\r\n          }\r\n\r\n          $.each(dataPages, (key, value) => {\r\n            bubbleData[value[3].qNum].elemNum.push(value[0].qElemNumber);\r\n            bubbleData[value[3].qNum].text.push(value[0].qText);\r\n            bubbleData[value[3].qNum].x.push(value[1].qNum);\r\n            bubbleData[value[3].qNum].y.push(value[2].qNum);\r\n          });\r\n\r\n          const chartData = [];\r\n          for (let i = 1; i <= layout.props.numberOfClusters; i++) {\r\n            chartData.push({\r\n              x: bubbleData[i].x,\r\n              y: bubbleData[i].y,\r\n              elemNum: bubbleData[i].elemNum,\r\n              text: bubbleData[i].text,\r\n              name: `cluster ${i}`,\r\n              mode: 'markers',\r\n              type: 'scatter',\r\n              marker: {\r\n                // color: `rgba(${palette[i - 1]},0.7)`,\r\n                size: layout.props.bubbleSize,\r\n              },\r\n            });\r\n          }\r\n\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:100%;\"></div>`);\r\n\r\n          const chart = bubbleChart.draw($scope, app, chartData, `aat-chart-${$scope.extId}`, null);\r\n          bubbleChart.setEvents(chart, $scope, app);\r\n          $(`#aat-chart-${$scope.extId} .legend .traces .legendtoggle`).css('display', 'none');\r\n          $(`#aat-chart-${$scope.extId} g.traces`).on('click', (data) => {\r\n            const selected = bubbleData[data.currentTarget.childNodes[1].textContent.replace('cluster ','')].text;\r\n            const fields = selected.map((d) => {\r\n              return parseInt(d, 10);\r\n            });\r\n            app.field($scope.layout.props.dimensions[0].expression).selectValues(fields, true, true);\r\n          });\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"
    ]
}