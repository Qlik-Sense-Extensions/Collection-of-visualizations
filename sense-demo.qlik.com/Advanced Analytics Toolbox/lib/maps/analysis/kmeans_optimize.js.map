{
    "version": 3,
    "sources": [
        "analysis/kmeans_optimize.js"
    ],
    "names": [
        "define",
        "lineChart",
        "utils",
        "$q",
        "createCube",
        "app",
        "$scope",
        "layout",
        "dimension",
        "props",
        "numberOfClusters",
        "validateDimension",
        "dimensions",
        "qNullSuppression",
        "qDef",
        "qFieldDefs",
        "meaLen",
        "measures",
        "length",
        "params",
        "validateMeasure",
        "meaList",
        "dataType",
        "i",
        "mea",
        "param",
        "data",
        "scaleData",
        "displayDebugModeMessage",
        "debugMode",
        "saveRDataset",
        "getDebugSaveDatasetScript",
        "defMea1",
        "optimizationMethod",
        "clusterMax",
        "bootstrap",
        "displayRScriptsToConsole",
        "qLabel",
        "backendApi",
        "applyPatches",
        "qPath",
        "qOp",
        "qValue",
        "JSON",
        "stringify",
        "patchApplied",
        "drawChart",
        "defer",
        "requestPage",
        "qTop",
        "qLeft",
        "qWidth",
        "qHeight",
        "getData",
        "then",
        "dataPages",
        "qHyperCube",
        "qMeasureInfo",
        "qMatrix",
        "qText",
        "displayConnectionError",
        "extId",
        "displayReturnedDatasetToConsole",
        "result",
        "parse",
        "palette",
        "getOneHundredColors",
        "x",
        "gap",
        "seSim",
        "$",
        "each",
        "key",
        "value",
        "push",
        "chartData",
        "y",
        "name",
        "error_y",
        "type",
        "symmetric",
        "array",
        "arrayminus",
        "thickness",
        "borderWidth",
        "color",
        "colors",
        "colorForMain",
        "mode",
        "marker",
        "size",
        "pointRadius",
        "html",
        "draw",
        "resolve",
        "promise"
    ],
    "mappings": "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",
    "file": "../../js/analysis/kmeans_optimize.js",
    "sourcesContent": [
        "define([\r\n  '../chart/line_chart',\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (lineChart, utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      const numberOfClusters = layout.props.numberOfClusters;\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const dimensions = [\r\n        {\r\n          qNullSuppression: true,\r\n          qDef: {\r\n            qFieldDefs: [dimension],\r\n            // qSortCriterias: layout.qHyperCubeDef.qDimensions[0].qDef.qSortCriterias\r\n          },\r\n        },\r\n      ];\r\n      const meaLen = layout.props.measures.length;\r\n      let params = `${utils.validateMeasure(layout.props.measures[0])} as mea0`;\r\n      let meaList = 'q$mea0';\r\n      let dataType = 'N';\r\n\r\n      for (let i = 1; i < meaLen; i++) {\r\n        const mea = utils.validateMeasure(layout.props.measures[i]);\r\n        if (mea.length > 0) {\r\n          const param = `,${mea} as mea${i}`;\r\n          params += param;\r\n          meaList += `,q$mea${i}`;\r\n          dataType += 'N';\r\n        }\r\n      }\r\n\r\n      let data = `cbind(${meaList})`;\r\n      if (layout.props.scaleData) {\r\n        data = `scale(cbind(${meaList}))`;\r\n      }\r\n\r\n      // Debug mode - set R dataset name to store the q data.\r\n      utils.displayDebugModeMessage(layout.props.debugMode);\r\n      const saveRDataset = utils.getDebugSaveDatasetScript(layout.props.debugMode, 'debug_kmeans_optimize.rda');\r\n\r\n      let defMea1 = '';\r\n      if (typeof layout.props.optimizationMethod == 'undefined' || layout.props.optimizationMethod == 'gap') {\r\n        defMea1 = `R.ScriptEvalExStr('${dataType}','${saveRDataset} library(cluster); library(jsonlite); set.seed(1); gap_kmeans<-clusGap(${data}, FUNcluster=kmeans, K.max=${layout.props.clusterMax}, B=${layout.props.bootstrap}); json<-toJSON(gap_kmeans$Tab); json;', ${params})`\r\n      }\r\n\r\n      // Debug mode - display R Scripts to console\r\n      utils.displayRScriptsToConsole(layout.props.debugMode, [defMea1]);\r\n\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: defMea1,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n    /**\r\n     * drawChart - draw chart with updated data\r\n     *\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Object} Promise object\r\n     */\r\n    drawChart($scope, app) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\r\n\r\n        // Display error when all measures' grand total return NaN.\r\n        if (dataPages[0].qMatrix[0][1].qText.length === 0 || dataPages[0].qMatrix[0][1].qText == '-') {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          // Debug mode - display returned dataset to console\r\n          utils.displayReturnedDatasetToConsole(layout.props.debugMode, dataPages[0]);\r\n\r\n          const result = JSON.parse(dataPages[0].qMatrix[0][1].qText);\r\n          const palette = utils.getOneHundredColors();\r\n\r\n          const x = [];\r\n          const gap = [];\r\n          const seSim = [];\r\n\r\n          $.each(result, (key, value) => {\r\n            x.push(key + 1);\r\n            gap.push(value[2]);\r\n            seSim.push(value[3]);\r\n          })\r\n\r\n          const chartData = [\r\n            {\r\n              x: x,\r\n              y: gap,\r\n              name: 'Gap statistic',\r\n              error_y: {\r\n                type: 'data',\r\n                symmetric: false,\r\n                array: seSim,\r\n                arrayminus: seSim,\r\n                thickness: layout.props.borderWidth,\r\n                color: (layout.props.colors) ? `rgba(${palette[3]},1)` : `rgba(${palette[layout.props.colorForMain]},1)`,\r\n              },\r\n              type: 'scatter',\r\n              mode: 'markers+lines',\r\n              marker: {\r\n                color: (layout.props.colors) ? `rgba(${palette[3]},1)` : `rgba(${palette[layout.props.colorForMain]},1)`,\r\n                size: layout.props.pointRadius,\r\n              },\r\n            },\r\n          ];\r\n\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:100%;\"></div>`);\r\n\r\n          lineChart.draw($scope, chartData, `aat-chart-${$scope.extId}`, null);\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"
    ]
}