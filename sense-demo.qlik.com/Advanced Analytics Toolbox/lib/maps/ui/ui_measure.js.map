{
    "version": 3,
    "sources": [
        "ui/ui_measure.js"
    ],
    "names": [
        "define",
        "uiElement",
        "leonardoui",
        "registerEvents",
        "$scope",
        "$compile",
        "aggregationList",
        "listMeasureListPopover",
        "isMeasureListOpened",
        "openMeasureList",
        "$event",
        "measureId",
        "element",
        "currentTarget",
        "popover",
        "content",
        "listMeasureElement",
        "replace",
        "closeOnEscape",
        "dock",
        "alignTo",
        "onClose",
        "$apply",
        "scope",
        "meaSearchString",
        "$",
        "drilldownMeasure",
        "expressionName",
        "expressionValue",
        "a",
        "listAggrMeasureElement",
        "b",
        "c",
        "d",
        "html",
        "goBackMeasure",
        "replaceWith",
        "selectMeasure",
        "aggregation",
        "expression",
        "i",
        "layout",
        "props",
        "measures",
        "expressionWithAggregation",
        "test",
        "backendApi",
        "applyPatches",
        "qPath",
        "qOp",
        "qValue",
        "JSON",
        "stringify",
        "label",
        "close",
        "removeMeasure",
        "addButton",
        "analysisTypeId",
        "customMinMeas",
        "removeButton",
        "minMeas"
    ],
    "mappings": "AAAA,YAAAA,SACE,eACA,8EACC,SAACC,EAAWC,GACb,OACEC,eADK,SACUC,EAAQC,GAErBD,EAAOE,iBAAmB,MAAO,QAAS,MAAO,MAAO,MAAO,MAAO,GAGtE,IAAIC,GAAyB,IAC7BH,GAAOI,uBACPJ,EAAOK,gBAAkB,SAACC,EAAQC,GAChC,GAAIP,EAAOI,oBAAoBG,GAE7BP,EAAOI,oBAAoBG,IAAa,MACnC,CACLP,EAAOI,oBAAoBG,IAAa,CACxC,IAAMC,GAAUF,EAAOG,aACvBN,GAAyBL,EAAWY,SAClCC,QAASd,EAAUe,mBAAmBC,QAAQ,OAArC,GAAgDN,GACzDO,eAAe,EACfC,KAAM,QACNC,QAASR,EACTS,QAL0C,WAMxCjB,EAAOkB,OAAO,SAACC,GACbA,EAAMf,oBAAoBG,IAAa,EACvCY,EAAMC,gBAAkB,QAI9BnB,EAASoB,EAAE,oBAAoBrB,KAKnCA,EAAOsB,iBAAmB,SAACf,EAAWgB,EAAgBC,GACpDxB,EAAOO,UAAYA,CAEnB,IAAMkB,GAAI5B,EAAU6B,uBAAuBb,QAAQ,cAAzC,GAA2DN,GAC/DoB,EAAIF,EAAEZ,QAAQ,cAAV,GAA4BN,GAChCqB,EAAID,EAAEd,QAAQ,mBAAV,GAAiCU,GACrCM,EAAID,EAAEf,QAAQ,oBAAV,GAAkCW,EAE5CH,GAAE,mBAAmBS,KAAKD,GAC1B5B,EAASoB,EAAE,oBAAoBrB,IAIjCA,EAAO+B,cAAgB,SAACzB,EAAQC,GAC9Bc,EAAE,mBAAmBW,YAAYnC,EAAUe,mBAAmBC,QAAQ,OAArC,GAAgDN,IACjFN,EAASoB,EAAE,oBAAoBrB,IAIjCA,EAAOiC,cAAgB,SAAC1B,EAAW2B,EAAaC,GAC9C,IAAK,GAAIC,GAAI7B,EAAW6B,GAAK,EAAGA,IACgB,mBAAnCpC,GAAOqC,OAAOC,MAAMC,SAASH,KACtC7B,EAAY6B,EAGhB,IAAII,GAA4B,IAG9BA,GADE,KAAKC,KAAKN,GACmBD,EAA/B,KAA+CC,EAA/C,KAE+BD,EAA/B,IAA8CC,EAA9C,IAEFnC,EAAO0C,WAAWC,eAEdC,MAAAA,mBAA0BrC,EAC1BsC,IAAK,MACLC,OAAQC,KAAKC,WACXC,MAAOT,EACPL,WAAYK,OAGf,GAEHrC,EAAuB+C,SAIzBlD,EAAOmD,cAAgB,SAAC5C,GACtBP,EAAO0C,WAAWC,eAEdC,MAAAA,mBAA0BrC,EAC1BsC,IAAK,YAEN,IAIL7C,EAAOoD,UAAY,SAACC,GAClBrD,EAAOsD,cAAcD,IAAmB,GAI1CrD,EAAOuD,aAAe,SAACF,GAEjBrD,EAAOsD,cAAcD,GAAkBrD,EAAOwD,UAEqC,mBAA1ExD,GAAOqC,OAAOC,MAAMC,SAASvC,EAAOsD,cAAcD,GAAkB,IAC7ErD,EAAOmD,cAAcnD,EAAOsD,cAAcD,GAAkB,GAE9DrD,EAAOsD,cAAcD,IAAmB",
    "file": "../../js/ui/ui_measure.js",
    "sourcesContent": [
        "define([\r\n  './ui_element',\r\n  '../../../../../../resources/assets/external/leonardo-ui/leonardo-ui.min.js',\r\n], (uiElement, leonardoui) => {\r\n  return {\r\n    registerEvents($scope, $compile) {\r\n      // Create aggregation list\r\n      $scope.aggregationList = ['Sum', 'Count', 'Avg', 'Min', 'Max', 'Log', ''];\r\n\r\n      // Measure List\r\n      let listMeasureListPopover = null;\r\n      $scope.isMeasureListOpened = [];\r\n      $scope.openMeasureList = ($event, measureId) => {\r\n        if ($scope.isMeasureListOpened[measureId]) {\r\n          // popover.close();\r\n          $scope.isMeasureListOpened[measureId] = false;\r\n        } else {\r\n          $scope.isMeasureListOpened[measureId] = true;\r\n          const element = $event.currentTarget;\r\n          listMeasureListPopover = leonardoui.popover({\r\n            content: uiElement.listMeasureElement.replace('<id>', `${measureId}`),\r\n            closeOnEscape: true,\r\n            dock: 'right',\r\n            alignTo: element,\r\n            onClose() {\r\n              $scope.$apply((scope) => {\r\n                scope.isMeasureListOpened[measureId] = false;\r\n                scope.meaSearchString = '';\r\n              });\r\n            },\r\n          });\r\n          $compile($('div.lui-popover'))($scope);\r\n        }\r\n      };\r\n\r\n      // Drill down to measure aggr list\r\n      $scope.drilldownMeasure = (measureId, expressionName, expressionValue) => {\r\n        $scope.measureId = measureId;\r\n        // $scope.expressoin = expressionName;\r\n        const a = uiElement.listAggrMeasureElement.replace('<measureId>', `${measureId}`);\r\n        const b = a.replace('<measureId>', `${measureId}`);\r\n        const c = b.replace('<expressionName>', `${expressionName}`)\r\n        const d = c.replace('<expressionValue>', `${expressionValue}`);\r\n\r\n        $('div.lui-popover').html(d);\r\n        $compile($('div.lui-popover'))($scope);\r\n      };\r\n\r\n      // Go back to top measure list\r\n      $scope.goBackMeasure = ($event, measureId) => {\r\n        $('div.lui-popover').replaceWith(uiElement.listMeasureElement.replace('<id>', `${measureId}`));\r\n        $compile($('div.lui-popover'))($scope);\r\n      };\r\n\r\n      // Select measure\r\n      $scope.selectMeasure = (measureId, aggregation, expression) => {\r\n        for (let i = measureId; i >= 0; i--) {\r\n          if (typeof $scope.layout.props.measures[i] == 'undefined') {\r\n            measureId = i;\r\n          }\r\n        }\r\n        let expressionWithAggregation = null;\r\n        // When expression includes whitespace, add square brankets\r\n        if (/\\s/.test(expression)) {\r\n          expressionWithAggregation = `${aggregation}([${expression}])`;\r\n        } else {\r\n          expressionWithAggregation = `${aggregation}(${expression})`;\r\n        }\r\n        $scope.backendApi.applyPatches([\r\n          {\r\n            qPath: `/props/measures/${measureId}`,\r\n            qOp: 'add',\r\n            qValue: JSON.stringify({\r\n              label: expressionWithAggregation,\r\n              expression: expressionWithAggregation,\r\n            }),\r\n          },\r\n        ], false);\r\n\r\n        listMeasureListPopover.close();\r\n      };\r\n\r\n      // Remove measure selection\r\n      $scope.removeMeasure = (measureId) => {\r\n        $scope.backendApi.applyPatches([\r\n          {\r\n            qPath: `/props/measures/${measureId}`,\r\n            qOp: 'remove',\r\n          },\r\n        ], false);\r\n      };\r\n\r\n      // Add measure button\r\n      $scope.addButton = (analysisTypeId) => {\r\n        $scope.customMinMeas[analysisTypeId] += 1;\r\n      };\r\n\r\n      // Remove measaure button\r\n      $scope.removeButton = (analysisTypeId) => {\r\n        // Remove button only when the number of button is over minMeas value\r\n        if ($scope.customMinMeas[analysisTypeId] > $scope.minMeas) {\r\n          // If removing measure item is already set, remove it from the property.\r\n          if (typeof $scope.layout.props.measures[$scope.customMinMeas[analysisTypeId] - 1] != 'undefined') {\r\n            $scope.removeMeasure($scope.customMinMeas[analysisTypeId] - 1);\r\n          }\r\n          $scope.customMinMeas[analysisTypeId] -= 1;\r\n        }\r\n      };\r\n    },\r\n  };\r\n});\r\n"
    ]
}